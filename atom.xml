<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MooooooQ]]></title>
  <link href="http://liuminqian.github.io/atom.xml" rel="self"/>
  <link href="http://liuminqian.github.io/"/>
  <updated>2013-11-03T09:48:29+08:00</updated>
  <id>http://liuminqian.github.io/</id>
  <author>
    <name><![CDATA[Minqian Liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS周报第006期]]></title>
    <link href="http://liuminqian.github.io/blog/2013/11/03/ioszhou-bao-di-006qi/"/>
    <updated>2013-11-03T09:43:00+08:00</updated>
    <id>http://liuminqian.github.io/blog/2013/11/03/ioszhou-bao-di-006qi</id>
    <content type="html"><![CDATA[<p><strong>第006期 &ndash; 2013年11月03日</strong></p>

<h2>新闻</h2>

<h4><a href="https://itunes.apple.com/us/course/developing-ios-7-apps-for/id733644550">斯坦福大学的iOS开发课程</a></h4>

<p>更新了iOS 7和Xcode 5。</p>

<h2>杂谈</h2>

<h4><a href="http://hi.baidu.com/ncaoz/item/6895b089a6cc71ded1f8cd4e">解密中国互联网</a></h4>

<p><a href="http://weibo.com/caoz">@caoz</a></p>

<h4>根据区域主颜色生成文字颜色</h4>

<p>这周我发现这样一个事情，如果一个<code>view</code>的<code>content</code>不断变化，而上面<code>label</code>的字体颜色不变化的话，会很难看。比如<code>label</code>默认字体是白色，那么<code>content</code>如果是以白色为主基调的，就基本看不清楚字了。所以我给自己想了这样一个命题，在<code>label</code>底下的<code>view</code>，如果<code>view</code>的<code>content</code>是不停的变化，那么<code>label</code>的文字也需要变化。</p>

<p>基本的解决思路如下：1）首先取到<code>superview</code>的<code>image</code>，既可以是<code>UIImageView</code>,也可以是<code>UIView</code>；2）然后知道<code>label</code>相对于<code>image</code>的<code>frame</code>，从而获得这个<code>frame</code>下<code>image</code>的颜色均值<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>；3）之后对获得的<code>UIColor</code>进行简单的二值化处理<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，获得是黑色还是白色；4）设置一个简单的换算方法，根据最后获得的值来算出<code>label</code>适合的<code>text color</code> 。</p>

<h2>博文</h2>

<h4><a href="http://railsware.com/blog/2013/10/15/dependency-injection-in-objective-c-with-blood-and-magic/">Dependency Injection in Objective-C with Blood and Magic</a></h4>

<p>Github也有些关于<a href="http://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC">依赖注入</a>(也称依赖反转)的Repo，作者分析了其不足。并从@dynamic <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>和self.new切入(因为self.new等同于alloc和init的组合，只能用init来初始化。)，从<code>__attribute__((constructor)) static void</code> <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> 和 希望从Protocol来解决这个目前依赖注入存在的不足。作者的Repo：<a href="https://github.com/railsware/BloodMagic">BloodMagic</a>。</p>

<h4><a href="http://iosdevelopertips.com/debugging/exceptions-try-catch-and-finally.html">Handling exceptions in Objective-C: Try, Catch and Finally</a></h4>

<p>这周跟同事也讨论了这个话题。Objective-C跟其他语言比起来，很少用到异常捕获，也很少看到相关文章，但对于可能引起App Fail的throw来说还是有用的。这篇文章简单讨论了<code>@try</code>、<code>@catch</code>、<code>@finally</code>和<code>@throw</code>如何使用。</p>

<h4><a href="http://www.appcoda.com/customize-navigation-status-bar-ios-7/">Customizing Navigation Bar and Status Bar in iOS 7</a></h4>

<p>如果你对iOS 7中自定义Navigation Bar和Status Bar仍有疑问，这篇浅显易懂的文章。作者还给了些tips，比如UIColorFromRGB的一个宏定义 <sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>。</p>

<h2>代码</h2>

<h4><a href="https://github.com/mrackwitz/MRProgress">MRProgress</a></h4>

<p>iOS风格的进度库。</p>

<p><img src="https://github.com/mrackwitz/MRProgress/raw/master//Images/screenshot_004_1.jpg" width="30%"></p>

<h4><a href="https://github.com/oclint/oclint">oclint</a></h4>

<p>代码的静态分析工具</p>

<h4><a href="https://github.com/conradev/CKBlurView">CKBlurView</a></h4>

<p>iOS 7中blur的私有API。</p>

<h2>结束语</h2>

<p>还记得那个悬浮label么(<a href="https://github.com/jverdi/JVFloatLabeledTextField">JVFloatLabeledTextField</a>)，设计者@mds讲述了<a href="http://mattdsmith.com/float-label-pattern/">How the Float Label Pattern Started</a>。</p>

<p>更多每周新出的一些Repo，可以Follow我的<a href="https://github.com/liuminqian">Github</a>。这里只有我个人觉得有点意思的Repo，也并不是说其他的没意思。</p>

<p>今天发晚了，是因为升级系统后，相关的环境没更新好，跟大家说声对不起。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://stackoverflow.com/questions/13694618/objective-c-getting-least-used-and-most-used-color-in-a-image">Objective-c &ndash; Getting least used and most used color in a image</a>，里面提到通过将image绘制在一个point上，来得到均值，很有意思的一个想法。里面提到的CGBitmapContextCreate，请看其的<a href="http://blog.csdn.net/wangyuchun_799/article/details/7804809">函数参数详解</a>。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>将UIColor转化为rgba(<a href="http://stackoverflow.com/questions/437113/how-to-get-rgb-values-from-uicolor">How to get RGB values from UIColor?</a>)，从而可以进行二值化。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><code>@property</code>(属性)常用于给外部访问的变量(告诉编译器声明一个实例变量和getter，setter方法)，而<code>instance varible</code>(实例变量)用于类内部、私有变量；<code>@synthesize</code>告诉编译器自动生成合适的getter,setter方法；<code>@dynamics</code>告诉编译器，getter、setter方法直接在class文件中实现，或者在运行时通过某种机制创建(不一定在class文件中，可能是父类)，你可以参考 <a href="http://stackoverflow.com/questions/1160498/synthesize-vs-dynamic-what-are-the-differences">1</a>、 <a href="http://stackoverflow.com/questions/11571910/clarification-on-properties-synthesize-and-dynamic-in-objective-c-2-0">2</a>、 <a href="http://stackoverflow.com/questions/2066193/whats-are-the-differences-between-dynamic-and-synthesize">3</a> 。 <code>@property</code>、 <code>@synthesize</code>、 <code>@dynamics</code> 都是编译器指令。题外话，就我个人理解<code>property</code>是面向对象的概念，是对象的属性；<code>attribute</code>是对象属性的某种特性characteristics，编译器通过这些<code>attribute</code>生成特定的setter和getter方法. <a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p><code>__attribute__((constructor))</code> 意思是在告诉编译器，在进入<code>main.m</code>前执行这个函数；<code>static void</code>通俗地讲就是这个函数对外不可见。具体细节你可以参看文中提到的<a href="http://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html"> GCC. Function Attributes</a>。更多<code>__attribute__</code>，请戳<a href="http://nshipster.com/__attribute__/">这里</a>。<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>UIColorFromRGB宏定义: <code>#define UIColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((rgbValue &amp; 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(rgbValue &amp; 0xFF))/255.0 alpha:1.0]</code><a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS周报第005期]]></title>
    <link href="http://liuminqian.github.io/blog/2013/10/27/ioszhou-bao-di-005qi/"/>
    <updated>2013-10-27T09:09:00+08:00</updated>
    <id>http://liuminqian.github.io/blog/2013/10/27/ioszhou-bao-di-005qi</id>
    <content type="html"><![CDATA[<p><strong>第005期 &ndash; 2013年10月27日</strong></p>

<h2>新闻</h2>

<h4><a href="http://engineering.linkedin.com/mobile/linkedin-intro-doing-impossible-ios">LinkedIn Intro: Doing the Impossible on iOS</a></h4>

<p>LinkedIn做了个叫Rapportive的东西，它扩展了Apple内置的iOS Mail App。刚看到的时候，真感觉impossible。后来看了技术实现，整个思路还是容易理解的。</p>

<h4><a href="http://www.leiphone.com/apple-new-ipad-macbook-mac.html">一分钟，让你全面了解苹果新品发布会</a></h4>

<p>还没去了解的同学，赶紧去了解下。</p>

<h2>杂谈</h2>

<h4><a href="http://tiny4cocoa.com/thread/show/1091/">码农在家工作写APP是否可行？前段时间ibuick也在找工作么？</a></h4>

<p>来自<a href="http://tiny4cocoa.com/">tiny4cocoa</a>。</p>

<h4>iOS 7 UITableView Bug</h4>

<p>UITableView的插入动画会retain table导致leak。</p>

<p><img src="http://ww1.sinaimg.cn/bmiddle/661d48fejw1e9ss6k8hy2j20f00qotav.jpg" width="40%"></p>

<h2>博文</h2>

<h4>iOS Degbugging Magic</h4>

<p>mattt新出了篇 <a href="http://nshipster.com/launch-arguments-and-environment-variables/">Launch Arguments &amp; Environment Variables</a>，分享了schema中Arguments Passed On Launch和Environment Variables的设置。这些设置方便了调试，如本地化、CoreData、Zombies、Memory Allocator等方面。结尾还分享了两个TN，如<a href="https://developer.apple.com/library/ios/technotes/tn2239/_index.html">iOS Debugging Magic</a>。分享另外一篇讲常用配置和schema知识点的博文，<a href="http://stablekernel.com/blog/ios-build-configurations-and-schemes/">点这里</a>。</p>

<h4><a href="http://ronnqvi.st/controlling-animation-timing/">Controlling Animation Timing</a></h4>

<p>对CAMediaTiming的深入研究。尤其是对timeOffset的使用那段，demo也很不错。</p>

<p><img  src="http://ronnqvi.st/images/peak.gif" width="50%"></p>

<h4><a href="http://www.mikeash.com/pyblog/friday-qa-2013-10-25-nsobject-the-class-and-the-protocol.html">Friday Q&amp;A 2013-10-25: NSObject: the Class and the Protocol</a></h4>

<p>NSObject既是Class，也是Protocol。这是因为在Objective-C中，Class和Protocol是处在完全分离开的Namespaces中。</p>

<h4><a href="http://darkdust.net/writings/objective-c/nsarray-enumeration-performance">NSArray enumeration performance examined</a></h4>

<p>NSArray枚举性能。从线性枚举、并发枚举和NSArray创建，这三个维度出发进行研究。</p>

<h4><a href="http://sunsetlakesoftware.com/2013/10/21/optimizing-gaussian-blurs-mobile-gpu">Optimizing Gaussian blurs on a mobile GPU</a></h4>

<p>Brad Larson这篇文章是关于在mobile GPU上优化高斯模糊的。</p>

<h2>代码</h2>

<h4><a href="https://github.com/chendo/FuzzyAutocompletePlugin">FuzzyAutocompletePlugin</a></h4>

<p>Xcode5上更灵活的补全插件。作者chendo的原理分析<a href="http://chen.do/blog/2013/10/22/reverse-engineering-xcode-with-dtrace/">Reverse engineering Xcode with dtrace</a>。Bignerdranch上有关于DTrace的资料，<a href="http://blog.bignerdranch.com/1907-hooked-on-dtrace-part-1/">Hooked on DTrace</a>。</p>

<p><img src="https://github-camo.global.ssl.fastly.net/b1bb84ef6070c39e15784443a8482f04459c8847/687474703a2f2f662e636c2e6c792f6974656d732f33423058326a31653231336130753162327832662f66757a7a796175746f636f6d706c6574652e676966" width="50%"></p>

<h4><a href="https://github.com/Alterplay/APTimeZones">APTimeZones</a></h4>

<p>通过给定CLLocation计算出TimeZone。很有趣的想法，跟通过人脸识别来让人脸正确显示在图片中的想法很类似。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS周报第004期]]></title>
    <link href="http://liuminqian.github.io/blog/2013/10/20/ioszhou-bao-di-004qi/"/>
    <updated>2013-10-20T09:21:00+08:00</updated>
    <id>http://liuminqian.github.io/blog/2013/10/20/ioszhou-bao-di-004qi</id>
    <content type="html"><![CDATA[<p><strong>第004期 &ndash; 2013年10月20日</strong></p>

<h2>新闻</h2>

<h4><a href="http://blog.quarkslab.com/imessage-privacy.html">iMessage Privacy</a></h4>

<p>讲述iMessage安全和内部原理。最近iMessage的骚扰消息是多了点。</p>

<h4><a href="http://government.github.com/">GitHub Government上线</a></h4>

<h2>杂谈</h2>

<h4>Monkey Patching</h4>

<p>这周我想让每个API请求都能先检查网络是否连接。于是定了个题目就是在不修改方法代码的情况下，对每个方法的代码前或者后面增加代码。很明显，我不希望给每个API直接加上代码，这样很不优雅。简单的Method Swizzle,如使用<a href="https://github.com/rentzsch/jrswizzle">jrswizzle</a>来替换方法，也不能完成。还有要处理多参数情况下，如何invoke方法。最后的方案是，通过class_copyMethodList获得方法列表，过滤掉不需要加代码的方法，之后参考<a href="https://gist.github.com/steipete/5664345">PSPDFReplaceMethodWithBlock</a>来替换方法，<a href="http://www.cocoachina.com/bbs/simple/?t104399.html">performSelector使用不限个参数方法</a>来invoke方法。这种技术称为Monkey Patching，你可以参看<a href="http://wufawei.com/2013/06/Monkey-Patching-iOS-with-Swizzling/">Monkey Patching iOS with Swizzling</a>。</p>

<h4><a href="https://github.com/lepture/github-cards">Github Cards</a></h4>

<p>你可以通过 Visit card generator:<a href="http://lab.lepture.com/github-cards/">http://lab.lepture.com/github-cards/</a>生成自己Github profile或者repo的卡片。如我的一个repo：</p>

<div class="github-card" data-user="liuminqian" data-repo="svpplytable" data-width="400" data-height="150"></div>


<script src="http://lab.lepture.com/github-cards/widget.js"></script>


<h4><a href="http://www.cnblogs.com/biosli/p/iOS_Network_URL_Session.html">NSURLSession使用说明及后台工作流程分析</a></h4>

<p>摇滚诗人 写了篇关于NSURLSession的博文。Raywenderlich有另外一篇<a href="http://www.raywenderlich.com/51127/nsurlsession-tutorial">教程</a>。Mike Abdullah <a href="http://www.mikeabdullah.net/nsurlsession-notes.html">Notes on NSURLSession</a>。<a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a>也还分享了<a href="http://www.devdiv.com/iOS_iPhone-ios_nsurlsession_-thread-206819-1-1.html">iOS7新特性-NSURLSession详解</a>,<a href="http://www.iwangke.me/2013/10/15/the-future-of-cocoa-networking-nsurlsession/">Cocoa网络框架的未来:NSURLSession</a>。</p>

<h2>博文</h2>

<h4><a href="http://oleb.net/blog/2013/10/rob-rix-postmodern-programming/">Rob Rix on Postmodern Programming</a></h4>

<p>Ole Begemann的一篇文章专门推荐了Rob Rix的<a href="https://github.com/robrix/Postmodern-Programming/blob/master/Postmodern%20Programming.md">Postmodern-Programming</a>。高端大气上档次。</p>

<h4><a href="http://pilky.me/view/37">Using Storyboards</a></h4>

<p>Martin讲了些关于正确使用Storyboard的内容。</p>

<h4><a href="http://blog.bignerdranch.com/4005-should-i-use-a-property-or-an-instance-variable/">Should I Use a Property or an Instance Variable?</a></h4>

<p>Bignerdranch刚出的一篇，讲了property和instance varible的区别和速度。结论是instance varible比property快，property相对来说调试上有优势。实验的过程有点意思，文章最后。。。</p>

<h4><a href="http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/">Objective-C对象模型及应用</a></h4>

<p><a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a>在他的<a href="http://blog.devtang.com/">唐巧的技术博客</a>新出了这篇博文，还出了<a href="http://blog.devtang.com/blog/2013/10/17/the-tech-detail-of-ape-client-1/">猿题库iOS客户端的技术细节（一）：使用多target来构建大量相似App</a>。</p>

<h4><a href="http://nshipster.com/nserror/">NSError</a></h4>

<p>mattt 新出了篇关于他的error之道。从code、domain和userinfo出发描述了NSError本身的结构，也讲了他对NSError的应用。</p>

<h4><a href="http://onevcat.com/2013/10/vc-transition-in-ios7/">iOS7中的ViewController切换</a></h4>

<p><a href="http://weibo.com/onevcat">@onevcat</a>写了篇关于ViewController过渡的中文教程。我之前分享过<a href="http://www.scottlogic.com/blog/2013/09/26/tabbar-custom-transitions.html">An Interactive Tar Bar Controller Transition</a>。</p>

<h4><a href="http://www.mikeash.com/pyblog/friday-qa-2013-10-11-why-registers-are-fast-and-ram-is-slow.html">Friday Q&amp;A 2013-10-11: Why Registers Are Fast and RAM Is Slow</a></h4>

<p>Mike Ash写了篇为什么寄存器比内存快，阮一峰的中文<a href="http://www.ruanyifeng.com/blog/2013/10/register.html">简单翻译</a>。</p>

<h2>代码</h2>

<h4><a href="https://github.com/path/FastImageCache">FastImageCache</a></h4>

<p>path分享了在滚动时快速展示图片的repo，原理上跟<a href="https://github.com/rs/SDWebImage">SDWebImage</a>最大的不同是他的Mapped Memory部分，建议看看README的原理介绍部分。SDWebImage的原理可参看<a href="http://blog.csdn.net/uxyheaven/article/details/7909373">SDWebImage 笔记</a>。关于Cache，最近还有<a href="https://github.com/tumblr/TMCache">TMCache</a>，这个设计用来持久化reproduce花费巨大的临时对象，另外一个特点是并发。</p>

<h4><a href="https://github.com/fotonauts/handlebars-objc">handlebars-objc</a></h4>

<p>Handlebar.js的objc版本。</p>

<h4><a href="https://github.com/Ceroce/CERoundProgressView">CERoundProgressView</a></h4>

<p>饼图进度条。</p>

<p><img src="https://github-camo.global.ssl.fastly.net/312e70a9303b7d79bc8b2dc1a58e1e11c2cc3d93/687474703a2f2f7777772e6365726f63652e636f6d2f6769746875622f434550726f6772657373566965772f50726f677265737356696577416c6f6e652e706e67" alt="" /><img src="https://github-camo.global.ssl.fastly.net/398025ee24e967f0739e40e3bff18adf29398b56/687474703a2f2f7777772e6365726f63652e636f6d2f6769746875622f434550726f6772657373566965772f50726f67726573735669657757697468427574746f6e2e706e67" alt="" /></p>

<h4><a href="https://github.com/jonathanpenn/ui-auto-monkey">UI AutoMonkey</a></h4>

<p>iOS App的压力测试脚本。</p>

<p><img src="https://raw.github.com/jonathanpenn/ui-auto-monkey/master/docimg/monkey.png" alt="" /></p>

<h4><a href="https://github.com/AshFurrow/FunctionalReactivePixels">FunctionalReactivePixels</a></h4>

<p>用ReactiveCocoa来完成FRP(Functional Reactive Programming)的DEMO。最近<a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a>特别火。分享<a href="http://blog.leezhong.com/ios/2013/06/19/frp-reactivecocoa.html">ReactiveCocoa与Functional Reactive Programming</a>。</p>

<p><img src="https://github-camo.global.ssl.fastly.net/6f929a98f14e03296aad72b85fedb89ca69c0740/687474703a2f2f7374617469632e617368667572726f772e636f6d2f6769746875622f67616c6c6572792e706e67" width="30%">
<img src="https://github-camo.global.ssl.fastly.net/617e0e98fdd2bb6a2374f8b2e5227b10bcd3ec0c/687474703a2f2f7374617469632e617368667572726f772e636f6d2f6769746875622f70686f746f2e706e67" width="30%"></p>

<h4><a href="https://github.com/MatthewYork/iPhone-IntroductionTutorial">iPhone-IntroductionTutorial</a></h4>

<p>iPhone引导界面。</p>

<p><img src="https://github-camo.global.ssl.fastly.net/6de4238de2af9f7f2af604dac922124ed78c3436/687474703a2f2f696d616765736861636b2e75732f612f696d673835362f383630362f696f7373696d756c61746f7273637265656e73686f746d2e706e67" width="30%">
<img src="https://raw.github.com/MatthewYork/iPhone-IntroductionTutorial/master/Resources/Images/IntercedeScreenshot.png" width="30%"></p>

<h4><a href="https://github.com/sprang/Inkpad">Inkpad</a></h4>

<p>iPad上的矢量绘图app。</p>

<p><img src="http://maniacdev.com/wp-content/uploads/2013/10/inkpad1.jpeg" width="30%"></p>

<h4><a href="https://github.com/MobileMakersAcademy/SuProgress">SuProgress</a></h4>

<p>类iOS 7 Safari风格的进度bar。</p>

<p><img src="https://github-camo.global.ssl.fastly.net/94b19e375a3d10dfa4212f9130f1e291eb5c2635/687474703a2f2f6d6f62696c656d616b65727361636164656d792e6769746875622e636f6d2f537550726f67726573732f537550726f67726573732e676966" width="30%"></p>

<h2>赞助</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Andy Matuschak对Designing for iOS: Graphics &amp; Performance的评论]]></title>
    <link href="http://liuminqian.github.io/blog/2013/10/19/andy-matuschakdui-designing-for-ios-graphics-and-performancede-ping-lun/"/>
    <updated>2013-10-19T22:48:00+08:00</updated>
    <id>http://liuminqian.github.io/blog/2013/10/19/andy-matuschakdui-designing-for-ios-graphics-and-performancede-ping-lun</id>
    <content type="html"><![CDATA[<p>Andy Matuschak对Designing for iOS: Graphics &amp; Performance的评论 中文翻译</p>

<h2>前言</h2>

<p>Reda Lemeden的<a href="http://robots.thoughtbot.com/post/36591648724/designing-for-ios-graphics-performance">Designing for iOS: Graphics &amp; Performance</a>，做过UI优化的哥们应该都比较熟悉吧，这里也有<a href="http://www.taofengping.com/2013/05/17/designing-for-ios-graphics-performance">taofengping的中文翻译</a>。Andy Matuschak(UIKit团队的一员)对这篇文章的评论更是受到关注。这篇文章的评论目前已经关掉，原来的部分评论可参看<a href="https://lobste.rs/s/ckm4uw/a_performance-minded_take_on_ios_design/comments/itdkfh">这里</a>。下述是我之前做的中文翻译。</p>

<h2>中文翻译</h2>

<p>Andy Matuschak 评论</p>

<p>我将阐述在上述投稿中提到的关于离屏绘制的几个要点。你上述列出关于离屏绘制的几种情况是对的，然而这个列表中却存在两个模糊的触发机制(每种有不同的性能特点)。单个View也有可能同时需要这两个机制。这两个机制有完全不同的性能考虑。</p>

<p>尤其是少量的确实是“离屏绘制”(实现了drawRect并做了Core Graphics绘制，使用Core Text[这只使用了Core Graphics])，但是这并不跟我们平常说的一样。这跟列表中的大多数的不一样的。当你实现了drawRect或者用CoreGraphics绘制，你就是使用了CPU来绘制，并且绘制是跟你的app是同步发生的。你只是简单地call一些函数(这些函数将bit写入到bitmap buffer)。</p>

<p>离屏绘制的另外形式是发生在render server(一个独立的进程)上，并经过GPU来完成(不经过CPU，如前文猜测)。当OpenGL render去绘制每一层，它可能不得不为一些子层次暂停下来并将他们组合到一个单独的buffer。你可能认为GPU在这类事情上总比CPU要快，但是有些技巧需要考虑。GPU将屏上绘制切换上下文(context)到离屏绘制的代价是非常昂贵的(它必须flush pipeline 和barrier)。这样对于简单的绘制操作，设置的花费将远比在CPU通过如CoreGraohics来绘制的整体花费要大。这样的话，如果你正在去处理复杂的层次，并需要决定是使用[CALayer setShouldRasterize:]还是通过CG来绘制层次内容时，最好的方法时测试和测量。</p>

<p>如果你在你的app中通过CG来绘制并在一个Layer上展示图片(需要离屏渲染)，你当然可以做两次的离屏通道。比如，如果你通过[CALayer renderInContext:]来获得一个截图，然后将截图放入一个有阴影的Layer中。当然如果你使用drawRect:或者通过CG来绘制，你可能是局部缓存。更多的请看”Polishing Your Rotation Animations&#8221;WWDC 2012。</p>

<p>对于shouldRasterize的考虑在遮罩(masking)、阴影、边缘抗锯齿、和不透明组(group opacity)是完全不同的。任何一个被触发，都没有缓存，并且离屏绘制都会在每帧发生。光栅化确实需要一个离屏绘制通道，但是一旦光栅化层的子层没有改变，那么光栅化将会缓存起来并在每帧重复。</p>

<p>对于缓存：如果你在你的app中大量的做了这类的绘制，那么你可能需要对存在你应用的堆中的所有这些(可能是大图)图做缓存清除。如果你收到内存警告，并且有一些图片没有被经常使用，那么你可能最好避免绘制stretchable的图片(并且当他们需要的时候lazily重新生成)。但是也可能是事情变的糟糕，所以测试也是需要的。</p>

<p>Adam Martin
Andy Matuschak</p>

<p>“如果层没有改变，那为什么缓存停止工作了？”</p>

<p>这是因为 对于遮罩，那些离屏通道从来没有缓存。一旦一个层的子树的光栅化被创建好了，就马上丢弃。它并没有自动缓存，这是因为离屏渲染的大多数情况是光栅化是每帧都改变的。对于大多数情况默认缓存的话将降低性能，所以只好放弃缓存。</p>

<p>但是这里有非常简单的解决方案。CA很高兴为你做缓存(直到一些hightwater mark)，但是你必须明确告诉它。你可以做[CALayer setShouldRasterize:YES]。你必须告诉它你要保存的缓存的分辨率([CALayer setRasterizationScale])。当然如果你开始做任何可能每帧都引起缓存的事情的时候，你需要设置，否则的话性能将快速下降，你可以查看WWDC 2011&#8221;Understanding UIKit Rendering&#8221;和WWDC 2012&#8221;Polishing Your Interface Rotation Animations&#8221;来获得更多。</p>

<h4>总结</h4>

<p>还有另外一种思考渲染的方式，Nick Lockwood在<a href="http://stackoverflow.com/questions/6731545/when-does-a-view-or-layer-require-offscreen-rendering">When does a view (or layer) require offscreen rendering?</a>的回答。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 设备的CPU/GPU体系结构基础]]></title>
    <link href="http://liuminqian.github.io/blog/2013/10/14/ios-she-bei-de-cpu-slash-gputi-xi-jie-gou-ji-chu/"/>
    <updated>2013-10-14T16:17:00+08:00</updated>
    <id>http://liuminqian.github.io/blog/2013/10/14/ios-she-bei-de-cpu-slash-gputi-xi-jie-gou-ji-chu</id>
    <content type="html"><![CDATA[<p>2013年3月9日，杭州</p>

<p><em>Key words:</em> iOS 设备, CPU/GPU, 图形绘制，性能优化(performance optimization)</p>

<p>对于iOS上app的性能提升中，绘制(Drawing)是一个重要的话题。对于一些技巧总是不能完全理解和明白，所以我从最基本的硬件层开始研究。对于绘制速度影响最大的是GPU。文献[1]中讨论了移动设备的GPU体系结构，在这里不详述。其中下述的内容需要比较多的图形学知识，可参考《OpenGL编程指南》(红宝书)和《Real-Time Rendering》(实时计算机图形学)。</p>

<p>iOS设备(文献[2])都采用了PowerVR系列作为GPU。该系列采用了3D渲染技术中&mdash;分块式延迟渲染技术(Titled-Based Deferred Rendering, TBDR，如图1所示)(文献[3])。采用该技术的原因是：当前嵌入式系统所能提供的系统带宽，在面对高性能高质量的应用时依然显得不足，而且访存操作被认为是嵌入式系统中功耗的主要来源之一，所以要在当前嵌入式图形显示系统中获得高质量、低功耗的设计，关键在于降低系统的带宽需求。而分块技术是将屏幕分割为许多小块区域分别进行场景的绘制渲染，这样做的最大优势是可以大幅度降低图形处理器对深度缓存的访存带宽需求。延迟渲染技术可以减少不必要的纹理映射等计算，进一步降低系统带宽要求。文献[4]中有该技术更详细地描述。</p>

<p><img src="http://publicopensource.qiniudn.com/TBDR.PNG" alt="" /></p>

<p>图1 TBDR 文献[5]</p>

<p>在图1中，值得注意的是Raster和HSR。</p>

<p>Tile-Based架构的基本结构框架如图2所示。PowerVR的渲染管线如图3所示，SGX/SGX-MP的结构如图4所示。大多数SGX使用区块16*16像素大小。</p>

<p><img src="http://publicopensource.qiniudn.com/BasicArch.PNG" alt="" /></p>

<p>图2 基本结构框图 文献[4]P26</p>

<p><img src="http://publicopensource.qiniudn.com/sgx%20renderline.PNG" alt="" /></p>

<p>图3 SGX渲染管线：每个分块的光栅化和片段处理 文献[5]P14</p>

<p><img src="http://publicopensource.qiniudn.com/sgx:sgx-mp.PNG" alt="" /></p>

<p>图4 SGX/SGX-MP 文献[5]P15</p>

<p>在iOS设备中，GPU的帧缓存区被分割成块通过块到块渲染，CPU/GPU共享同一内存(上面的图中可以很容易看出，也可参考文献[6])。</p>

<h5>参考文献：</h5>

<p>[1] 移动设备GPU架构[EB/OL]. <a href="http://bastianzuehlke.wordpress.com/2012/04/05/mobile-gpus-architectures/">http://bastianzuehlke.wordpress.com/2012/04/05/mobile-gpus-architectures/</a></p>

<p>[2] iOS 设备的硬件[EB/OL]. <a href="http://blakespot.com/ios_device_specifications_grid.html">http://blakespot.com/ios_device_specifications_grid.html</a></p>

<p>[3] PowerVR[EB/OL]. <a href="http://en.wikipedia.org/wiki/PowerVR">http://en.wikipedia.org/wiki/PowerVR</a></p>

<p>[4] 朱玥. Tile-Based图形处理方法及高质量图形算法设计[D]. 中国科学技术大学, 2012.</p>

<p>[5] PowerVR 系列架构[EB/OL]. <a href="http://www.imgtec.com/powervr/insider/docs/POWERVR%20Series5%20Graphics.SGX%20architecture%20guide%20for%20developers.1.0.8.External.pdf">http://www.imgtec.com/powervr/insider/docs/POWERVR%20Series5%20Graphics.SGX%20architecture%20guide%20for%20developers.1.0.8.External.pdf</a></p>

<p>[6] iOS硬件指南[EB/OL]. <a href="http://docs.unity3d.com/Documentation/Manual/iphone-Hardware.html">http://docs.unity3d.com/Documentation/Manual/iphone-Hardware.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS周报第003期]]></title>
    <link href="http://liuminqian.github.io/blog/2013/10/13/ioszhou-bao-di-3qi/"/>
    <updated>2013-10-13T09:05:00+08:00</updated>
    <id>http://liuminqian.github.io/blog/2013/10/13/ioszhou-bao-di-3qi</id>
    <content type="html"><![CDATA[<p><strong>第003期 &ndash; 2013年10月13日</strong></p>

<h2>新闻</h2>

<h4><a href="https://developer.apple.com/app-store/marketing/guidelines">App Store 营销指南</a></h4>

<p>Apple针对iPhone 5s和5c更新了App Store营销指南。</p>

<h4><a href="http://www.zhihu.com/question/21646392/answer/18875188?from=duzhihu">为什么一般的舆论都认为 Apple 或 iPhone 不行了，各种 Android 机舆论却很好？</a></h4>

<p>从Apple发布5s开始，舆论就大范围吹iPhone不行了，再到首周900w(终于保住工作了)。</p>

<h2>杂谈</h2>

<h5><a href="https://blog.loom.com/how-we-fixed-the-ios7-forced-logout-bug-thats-been-plaguing-so-many-apps/">Keychain和后台刷新</a></h5>

<p>对iOS文件保护策略了解朋友其实很容易就能理解这篇博客。这种情况在iPhone锁住时去完成后台刷新，而后台刷新又需要访问Keychain时发生。</p>

<h4>代码混淆</h4>

<p><a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a>分享了一下：1)重要代码用c来写；2）<a href="http://weibo.com/turingbook">@刘江总编</a>提供了stackoveflow的一个<a href="http://stackoverflow.com/questions/5556849/iphone-ipad-app-code-obfuscation-is-it-possible-worth-it">链接</a>。更详细地可以去看<a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a>微博。</p>

<h4>iOS 7</h4>

<p>这几周关于iOS 7的教程和讨论都被炒烂了:<a href="http://www.objc.io/">objcio #5</a>、<a href="http://www.shinobicontrols.com/blog/posts/2013/09/19/introducing-ios7-day-by-day/">Introducing iOS 7 Day by Day</a>，还有<a href="http://weibo.com/onevcat">onevcat</a>的<a href="http://onevcat.com/2013/06/developer-should-know-about-ios7/">开发者所需要知道的iOS7 SDK新特性</a>等。</p>

<h2>博文</h2>

<h4><a href="http://www.iwangke.me/2013/10/09/delta-update-difference-between-ios-6-and-ios-7/">iOS 6与iOS 7的增量更新的区别</a></h4>

<p>从iOS 6开始，App Store就支持增量更新。在iOS 6和iOS 7中增量更新的区别在对文件修改部分。iOS 6是直接替换文件，而iOS 7是根据diff结果作patch(可以理解为就对修改过的代码做了更新)。熟悉git的朋友更容易理解这篇文章。</p>

<h4><a href="http://answerhuang.duapp.com/index.php/2013/10/11/%E5%85%88%E8%BF%9B%E7%9A%84%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%E5%B7%A5%E5%85%B7%E7%AE%B1/">先进的自动布局工具箱</a></h4>

<p><a href="http://weibo.com/u/1623064627">@answer-huang</a>翻译了objcio#3中的<a href="http://www.objc.io/issue-3/advanced-auto-layout-toolbox.html">Advanced Auto Layout Toolbox</a>。</p>

<h2>代码</h2>

<h4><a href="https://github.com/benzguo/BZGFormField">BZGFormField</a></h4>

<p>UI/UX挺不一样的表单，建议看看。</p>

<h4><a href="https://github.com/nikolaypavlov/MLPNeuralNet">MLPNeuralNet</a></h4>

<p>iOS和Mac OS X的 快速 多层感知器神经网络(Multilayer Perceptron neural network,MLP neural netwoks) 的一个lib。</p>

<h4><a href="https://github.com/Marxon13/Dynamic-UIButton">Dynamic UIButton</a></h4>

<p>类似于App Store购买按钮的动态效果。</p>

<h4><a href="https://github.com/jverdi/JVFloatLabeledTextField">JVFloatLabeledTextField</a></h4>

<p>UITextField子类，能让placeholders在填入内容的时候悬浮，挺有趣。</p>

<h4><a href="https://github.com/alobi/ALMoviePlayerController">ALMoviePlayerController</a></h4>

<p>MPMoviePlayerController的替换，可自定义UI。</p>

<h4><a href="https://github.com/ChrisXu1221/CXAlertView">CXAlertView</a></h4>

<p>自定义的AlertView。</p>

<h4><a href="https://github.com/rolandleth/LTHPasscodeViewController">LTHPasscodeViewController</a></h4>

<p>iOS 7 风格的 Passcode Lock。</p>

<h4><a href="https://github.com/twobitlabs/TBMacros">TBMacros</a></h4>

<p>常用的一些宏。</p>

<h4><a href="https://github.com/imtiger/HappyEnglish">HappyEnglish</a></h4>

<p><a href="http://weibo.com/xmuzyq">@Krq_Tiger</a>开源了他之前做的HappyEnglish的iOS App。</p>

<h4><a href="https://github.com/nicktoumpelis/HiBeacons">HiBeacons</a></h4>

<p>iBeacons的一个Demo App。</p>

<h2>赞助</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS周报第002期]]></title>
    <link href="http://liuminqian.github.io/blog/2013/10/06/ioszhou-bao-di-002qi/"/>
    <updated>2013-10-06T08:39:00+08:00</updated>
    <id>http://liuminqian.github.io/blog/2013/10/06/ioszhou-bao-di-002qi</id>
    <content type="html"><![CDATA[<p><strong>第002期 &ndash; 2013年10月06日</strong></p>

<h2>新闻</h2>

<h4><a href="http://mashable.com/2013/09/26/mlb-at-the-ballpark-app/">MLB and iBeacon</a></h4>

<p>iBeacon实现的一个新闻。iBeacon的介绍，以及NFC的比较可以看<a href="http://gigaom.com/2013/09/10/with-ibeacon-apple-is-going-to-dump-on-nfc-and-embrace-the-internet-of-things/">这里</a>。36kr上<a href="http://www.36kr.com/p/206594.html">iBeacon定位技术将如何走进我们的生活？</a>和<a href="http://www.36kr.com/p/206695.html">苹果iBeacon改变本地商业的10个理由</a>。大家都在关注iBeacon，也可以看到iBeacon还处于早期的位置。</p>

<h2>杂谈</h2>

<h4><a href="https://twitter.com/ObjectiveCStack">Objective-C SO</a></h4>

<p>专门发布Stack Overflow上关于iOS和Objective-C相关内容的Twitter帐号。</p>

<h2>博文</h2>

<h4><a href="http://schlu.org/2013/10/01/Xcode-Asset-Catalogs.html">Xcode Asset Catalogs</a></h4>

<p>比较深入的介绍了Asset Catalogs，包括基础的使用、优劣等内容。</p>

<h4><a href="http://www.raywenderlich.com/50151/text-kit-tutorial">Text Kit Tutorial</a></h4>

<p>Raywenderlich上的一篇Text Kit教程。</p>

<h2>代码</h2>

<h4><a href="github.com/neoneye/autodescribe">Autodescribe</a></h4>

<p>打印类实例的属性值。我个人觉得随着Xcode的不断前进，这类lib会越来越少被用到。</p>

<h4><a href="http://mentalfaculty.tumblr.com/post/62909673342/introducing-ensembles-core-data-sync-the-way-it-should">Ensembles</a></h4>

<p>一个新的CoreData同步lib。</p>

<h4><a href="https://github.com/IFTTT/JazzHands">Jazz Hands</a></h4>

<p>基于关键帧的新手引导动画框架，动画可以通过手势、scrool views、kvo或者ReactiveCocoa来控制。</p>

<h4><a href="https://github.com/seanhess/wizardwar">wizardwar</a></h4>

<p>实时网络对战开源游戏。</p>

<h4><a href="https://github.com/stanislaw/AFNetworkingMeter">AFNetworkingMeter</a></h4>

<p>度量网络状况。</p>

<p><img src="https://raw.github.com/stanislaw/AFNetworkingMeter/master/AFNetworkingMeter.png" alt="" /></p>

<h4><a href="https://github.com/nicklockwood/SoundManager">SoundManager</a></h4>

<p>管理声音和音乐的播放。</p>

<h2>赞助</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS周报第001期]]></title>
    <link href="http://liuminqian.github.io/blog/2013/09/29/ioszhou-bao-di-001-qi/"/>
    <updated>2013-09-29T09:02:00+08:00</updated>
    <id>http://liuminqian.github.io/blog/2013/09/29/ioszhou-bao-di-001-qi</id>
    <content type="html"><![CDATA[<p><strong>第001期 &ndash; 2013年9月29日</strong></p>

<h2>新闻</h2>

<h4><a href="https://developer.apple.com/tech-talks/cn/">Apple Tech Talks 2013</a></h4>

<p>在中国上海的iOS Tech Talks活动将于11月12日展开，活动主要针对iOS 7。活动分为App开放日和游戏开放日，主要内容可查看<a href="https://developer.apple.com/tech-talks/cn/">链接</a>。当你看到这篇周报的时候，申请已经截止。</p>

<h4><a href="http://www.leiphone.com/ios-7-multi-path-tcp.html">iOS 7的多径技术</a></h4>

<p>就是说当你连着Wi-Fi和3G听豆瓣电台，Wi-Fi挂了之后，该技术保证自动连接3G来保持音乐的流畅，你也可以查看<a href="http://qz.com/126642/apples-ios7-includes-a-surprise-a-ticket-to-the-next-generation-of-the-internet/">Quartz原文</a>。</p>

<h2>杂谈</h2>

<h4>兼容iOS 6和iOS 7的UI</h4>

<p><a href="http://weibo.com/keepthismoment">pat叔</a>在<a href="(http://www.zhihu.com/question/21697443/answer/19028817">知乎</a>进行了回答。对于这个问题，大多都会采用Method Swizzling。对Method Swizzling不大懂的朋友可以看<a href="http://www.cnblogs.com/kesalin/archive/2012/01/05/objc_method_swizzling.html">这里</a>或<a href="http://cocoadev.com/MethodSwizzling">这里</a>。当然也可以不走swizzling，<a href="http://weibo.com/hangcom">hangcom2010</a>通过所有图片都走一个ImageCenter来完成。我觉得还是Method Swizzling来得舒服。</p>

<h4><a href="http://nshipster.com/afnetworking-2/">AFNetworking 2.0</a></h4>

<p>AFNetworking发布了最新的2.0版本，主要<a href="https://github.com/AFNetworking/AFNetworking/wiki/AFNetworking-2.0-Migration-Guide">改进</a>：1）架构重构；2）支持NSURLSession；3）Serialization Modules；4）Expanded UIKit Extensions；5）Real-time functionality with <a href="http://rocket.github.io/">Rocket</a>。</p>

<h4>iOS 7.0.2 发布</h4>

<p>修复锁屏漏洞和中文输入法问题，只有20M大小。</p>

<h2>博文</h2>

<h4><a href="http://www.raywenderlich.com/49850/whats-new-in-objective-c-and-foundation-in-ios-7">What’s New in Objective-C and Foundation in iOS 7</a></h4>

<p>介绍了Modules(还介绍了来由)、新的返回类型-instancetype(matt有篇<a href="http://nshipster.com/instancetype/">博文</a>专门讨论)和新的Foundations，中文翻译可以看<a href="http://blog.csdn.net/joywii/article/details/12103327">这里</a>。</p>

<h4><a href="https://nshipster.com/ios7/">NSHipster iOS7</a></h4>

<p>有人在这篇文章上看到新的SDK,做了读文本的<a href="https://github.com/kgn/Hark">项目</a>。</p>

<h4><a href="http://www.sealiesoftware.com/blog/archive/2013/09/24/objc_explain_Non-pointer_isa.html">isa不再是指针</a></h4>

<p>在<a href="http://www.mikeash.com/pyblog/friday-qa-2013-09-27-arm64-and-you.html">iOS的arm64</a>中，Objective-C对象的isa不再是指针了。这对普通的开发工作其实没什么影响。不过你在应用Runtime的时候，需要知道这个问题。博文里面也给出了需要注意的几个场景。</p>

<h4><a href="http://www.scottlogic.com/blog/2013/09/26/tabbar-custom-transitions.html">View Controller过渡动画</a></h4>

<p>博主的文章中介绍了如何自定义过渡动画和创建可交互的过渡动画，并开源了<a href="https://github.com/ColinEberhardt/VCTransitionsLibrary">VCTranstionsLibrary</a>。<a href="http://nsscreencast.com/">NSScreencast</a>的<a href="http://nsscreencast.com/episodes/86-ios-7-view-controller-transitions">Episode #86</a>和<a href="http://nsscreencast.com/episodes/88-interactive-view-controller-transitions">Episode #88</a>也介绍了这个主题。大家可以通过这两个地方学习下如何制作VC过渡动画。</p>

<h4><a href="http://tiny4cocoa.com/thread/show/117/">苹果Xcode帮助文档阅读指南</a></h4>

<p>对iOS doc set 不熟悉的可以看看这篇文章。</p>

<h4><a href="http://beyondvincent.com/blog/2013/09/29/113-spritekit-tutorial-for-beginners-2/">Sprite Kit初级教程2</a></h4>

<p>中文翻译可看<a href="http://beyondvincent.com/blog/2013/09/29/113-spritekit-tutorial-for-beginners-2/">这里</a>，<a href="http://beyondvincent.com/">破船</a>这哥们翻译真勤快！</p>

<h2>代码</h2>

<h4><a href="http://asciiwwdc.com">Searchable full-text transcripts of WWDC sessions</a></h4>

<p>来自<a href="http://nshipster.com/">matt</a>的大福利：WWDC纯文字版，并开源<a href="https://github.com/mattt/asciiwwdc.com">asciiwwdc.com</a>。</p>

<h4><a href="https://github.com/questbeat/Lin-Xcode5">Lin-Xcode5</a></h4>

<p>Xcode5上的本地化文件（Localizable.strings）管理的插件。</p>

<h4><a href="https://github.com/kattrali/Xcode5-Plugin-Template">Xcode5插件模版</a></h4>

<p>如何制作插件可以参考<a href="http://onevcat.com/2013/02/xcode-plugin/">Xcode 4 插件制作入门</a>。</p>

<h4><a href="https://github.com/shinydevelopment/SDScreenshotCapture">SDScreenshotCapture</a></h4>

<p>整个屏幕截图，包括status bar。这个功能对达到特殊效果往往有更多的用处，比如状态恢复或者某些动画等。</p>

<h4><a href="http://daveaddey.com/?p=1273">iOS app release checklist</a></h4>

<p>iOS app发布前的检查列表，<a href="https://github.com/oisin/app-release-checklist">Github地址</a>。</p>

<h2>赞助</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS博客列表]]></title>
    <link href="http://liuminqian.github.io/blog/2013/09/25/iosbo-ke-lie-biao/"/>
    <updated>2013-09-25T12:23:00+08:00</updated>
    <id>http://liuminqian.github.io/blog/2013/09/25/iosbo-ke-lie-biao</id>
    <content type="html"><![CDATA[<p>下面收集了国内外比较好的iOS方面的博客。每周会从这里选些有意思的玩意儿来作为每周更新的材料。</p>

<p>博客不错的土豪们请和<a href="http://weibo.com/u/3802884071">@我</a>做朋友，拜托了！</p>

<h2>国外</h2>

<ul>
<li><a href="http://iosdevweekly.com/">iOSDevWeekly</a>
  关于iOS开发的一些新闻、工具、代码、设计和商业等内容，已经有上百期了。</li>
<li><a href="http://nshipster.com/">NSHipster</a>
  对挺多基础的东西解释的比较好。作者mattt，就是写AFNetworking的大牛。</li>
<li><a href="http://www.mikeash.com/pyblog/">NSBlog</a>      Mac OS X 和 iOS编程的高级话题，内容大多有内涵。</li>
<li><a href="http://www.objc.io/">objcio</a>
  大牛很多的博客，每期内容都很高端大气上档次，而且很丰富，必看，里面提到的作者你都可以看下，oleb这些都在。</li>
<li><a href="http://www.raywenderlich.com/">Raywenderlich</a>
  很多基础教程，有专门的人在翻译，你可以将语言改成中文来查找已经翻译过的文章。</li>
<li><a href="http://blog.bignerdranch.com/">Bignerdranch</a>
   一群经验丰富的小伙伴们。</li>
<li><a href="http://sunsetlakesoftware.com/blog">Brad Larson</a></li>
<li><a href="http://oleb.net/blog/">Ole Begemann</a></li>
<li><a href="http://nsscreencast.com/">NSScreencast</a> 需翻墙。</li>
<li><a href="http://pilky.me/">Pilky.me</a></li>
<li><a href="http://jeremywsherman.com/">jeremywsherman</a></li>
<li><a href="http://daringfireball.net">daringfireball</a></li>
<li><a href="http://blog.iphone-dev.org/">DEV-TEAM BLOG</a></li>
<li><a href="https://github.com/trending?l=objective-c">Github Trending</a></li>
<li><a href="http://stackoverflow.com/questions/tagged/ios">stackoverflow iOS</a></li>
<li><a href="http://stackoverflow.com/questions/tagged/xcode">stackoverflow Xcode</a></li>
<li><p><a href="http://stackoverflow.com/questions/tagged/objective-c">stackoverflow Objective-C</a></p>

<h2>国内</h2></li>
<li><p><a href="http://onevcat.com/">onevcat</a> <a href="http://weibo.com/onevcat">@onevcat</a></p></li>
<li><a href="http://lextang.com/">Lex Tang</a></li>
<li><a href="http://blog.devtang.com/blog/categories/ios/">唐巧的技术博客</a> <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a></li>
<li><a href="http://wufawei.com/">Ted&rsquo;s Homepage</a></li>
<li><a href="http://geeklu.com/">Luke&rsquo;s Homepage</a></li>
<li><a href="http://blog.csdn.net/kesalin">罗朝辉(飘飘白云)</a></li>
<li><a href="http://blog.cnrainbird.com/index.php/category/mios/">Rainbird的个人博客</a></li>
<li><a href="http://www.v2ex.com/">V2EX</a></li>
<li><p><a href="http://bbs.pediy.com/forumdisplay.php?f=166">看雪iOS安全</a></p></li>
<li><p><strong>唐巧的iOS开发微信帐号</strong></p></li>
</ul>


<p><img src="http://blog.devtang.com/images/weixin-qr.jpg" alt="唐巧的iOS开发微信帐号" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Dev Weekly 笔记]]></title>
    <link href="http://liuminqian.github.io/blog/2013/09/20/ios-dev-weekly-bi-ji/"/>
    <updated>2013-09-20T11:45:00+08:00</updated>
    <id>http://liuminqian.github.io/blog/2013/09/20/ios-dev-weekly-bi-ji</id>
    <content type="html"><![CDATA[<p><a href="http://iosdevweekly.com/">iOS Dev Weekly</a>每周会发表关于iOS开发方面的News, Tools, Code, Design和Business。你可以订阅下。</p>

<p>下面并没有包含iosdevweekly的所有内容。</p>

<h2>笔记</h2>

<p><strong>Issue 112</strong> &ndash; 20/09/2013</p>

<ul>
<li><a href="http://get.helpshift.com/free-ios7-guide/">The Ultimate iOS 7 Update Guide</a>：iOS 7更新终极指南。</li>
<li><a href="https://github.com/ryanolsonk/LLDB-QuickLookl">LLDB-QuickLook</a>：提供了在控制台使用命令来quicklook图片、views等功能。</li>
<li><a href="http://get.helpshift.com/free-ios7-guide/">PLCrashReporter beta with ARM64 Support</a>：PLCrashReporter beta开始支持ARM64。</li>
<li><a href="http://www.doubleencore.com/2013/09/essential-ios-7-developers-guide/">The Essential iOS 7 Developer&rsquo;s Guide</a>：不错的iOS 7开发指南，有一个系列的文章，推荐。</li>
<li><a href="https://github.com/marcoarment/FCModel">FCModel</a>：直接访问SQL。</li>
<li><a href="http://blog.ittybittyapps.com/blog/2013/09/20/lifting-the-lid-on-ios-7s-uipicker/">Lifting the lid on the iOS 7 UIPicker</a>：解剖iOS 7 UIPicker。</li>
<li><a href="http://www.theverge.com/2011/12/13/2612736/ios-history-iphone-ipad">iOS: A visual history</a>：iOS的视觉历史。</li>
<li><a href="https://tapfame.com/ios7">iOS 7 Before and After</a>：iOS 7下，App的前后对比。</li>
<li><a href="http://afterios7icon.tumblr.com/">After iOS 7 Icons</a>：iOS 7下，Icon的变化。</li>
</ul>


<p><strong>Issue 111</strong> &ndash; 13/09/2013</p>

<ul>
<li><a href="http://gigaom.com/2013/09/10/with-ibeacon-apple-is-going-to-dump-on-nfc-and-embrace-the-internet-of-things">iBeacon and the internet of things</a> ：介绍了iBeacon，以及其和NFC的比较。</li>
<li><a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaTouch64BitGuide/Introduction/Introduction.html">64-Bit Transition Guide for Cocoa Touch</a>：Cocoa Touch 64位过渡指南。</li>
<li><a href="http://jamesdempsey.net/2013/09/10/updated-ios-device-summary-with-iphone-5s-and-iphone-5c">Updated iOS Device Summary with iPhone 5S and iPhone 5C</a></li>
<li><a href="http://mjtsai.com/blog/2013/09/10/arc-vs-mrc-performance">ARC vs. MRC Performance</a>：ARC 和 MRC的性能比较，建议看下，当然不是建议放弃ARC。</li>
<li><a href="https://github.com/robotmedia/RMStore">RMStore</a>：应用内购买(IAP)的轻量级框架。</li>
<li><a href="http://www.politepix.com/2013/08/26/openears-1-5">OpenEars, with Spanish</a>：OpenEars是一个离线的语音识别和text-to-speech（文字语音转换，TTS）开发工具包，原先只支持English，现在支持Spanish，中文使用教程可参考<a href="http://blog.sina.com.cn/s/blog_4b55f6860101e5an.html">这里</a>。</li>
<li><a href="https://gist.github.com/steipete/6526860">UIKitLegacyDetector</a>：检测你的app是不是在跑新的iOS 7 UI。</li>
<li><a href="https://github.com/JaviSoto/iOS7-Runtime-Headers/commit/6ccf9c4526992fec0dc414d48e4a3f7446e9822f#commitcomment-4060336">isYoMamaWearsFancyGlassesDetectionEnabled</a>：iOS 7中，有一些非常有趣的API。</li>
</ul>


<p><strong>Issue 110</strong> &ndash; 6/09/2013</p>

<ul>
<li><a href="http://danieltull.co.uk/blog/2013/09/05/easier-merging-of-xcode-project-files/">Easier merging of Xcode project files</a>：使merge Xcode文件变得简单，从<a href="https://github.com/WebKit/webkit/blob/master/Tools/Scripts/sort-Xcode-project-file">WebKit</a>项目里发现的一小段脚本，不过也有一点坑，有兴趣的看下。</li>
<li><a href="http://ios.devtools.me/">iOS Dev Tools</a>：iOS常用开发工具。</li>
<li><a href="http://koboldkit.com/">Kobold Kit</a>：基于Sprite Kit的游戏引擎，<a href="https://github.com/KoboldKit/KoboldKit">Github 地址</a>。</li>
<li><a href="http://www.raywenderlich.com/46988/ios-design-patterns">iOS Design Patterns</a>：iOS设计模式，发在raywenderlich上，中文翻译点<a href="http://xmuzyq.iteye.com/blog/1942376">这里</a>。</li>
<li><a href="https://github.com/ccgus/fmpsd">FMPSD</a>：读写PSD图片。</li>
<li><a href="https://github.com/claaslange/iOS7Colors">iOS7Colors</a>：标准的iOS 7 Colors。</li>
</ul>


<p><strong>Issue 109</strong> &ndash; 30/08/2013</p>

<ul>
<li><a href="https://buildozer.io/">Buildozer Beta Updates</a>：Buildozer是一款自动build和distribution工具。</li>
<li><a href="http://www.gamasutra.com/view/news/199109/Unity_introduces_new_2D_tools.php">Unity introduces new 2D tools</a></li>
<li><a href="https://github.com/nicklockwood/FXBlurView">FXBlurView</a>：FXBlurView是UIView的子类，仿iOS 7的模糊效果，并适用于iOS 5及以上。</li>
<li><a href="http://blog.zachwaugh.com/post/59312562596/preventing-xcode-from-building-with-error">Preventing Xcode from building with #error</a>：用#error来阻止Xcode build，不错tip，同一类型的还有#warning &lt;#message#>或者 // TODO: &lt;#message#>。</li>
<li><a href="https://github.com/hfossli/AGAsyncTestHelper">AGAsyncTestHelper</a>：异步测试的一些C 宏。</li>
<li><a href="https://github.com/xyfeng/XYPieChart">XYPieChart</a>：漂亮简单的饼图。</li>
</ul>


<p><strong>Issue 108</strong> &ndash; 23/08/2013</p>

<ul>
<li><a href="http://benscheirman.com/2013/08/the-ios-developers-toolbelt/">75 Essential Tools for iOS Developers</a>：iOS 开发者必知的 75 个工具，需要翻墙，中文翻译点<a href="http://xiaojiayi.com/">这里</a>。</li>
<li><a href="http://www.tuaw.com/2013/08/21/dev-juice-using-your-tech-support-incidents/">Using your tech support incidents</a>：IDP所支付的钱不单单是上架app，还包括了Apple对开发者的在代码层面上的技术支持。</li>
<li><a href="https://github.com/siuying/IGHTMLQuery">IGHTMLQuery</a>：轻量级XML/HTML解析器。</li>
<li><a href="https://github.com/nicolaschengdev/WYPopoverController">WYPopoverController</a>：自定义popover。</li>
<li><a href="http://www.teehanlax.com/blog/reproducing-the-ios-7-mail-apps-interface/">Reproducing the iOS 7 Mail App&rsquo;s Interface</a>：模拟iOS 7中Mail App的效果，主要是滑动删除这个效果，作者也开源了这个项目，点<a href="https://github.com/TeehanLax/UITableViewCell-Swipe-for-Options">这里</a>。</li>
<li><a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/CHANGELOG.md">ReactiveCocoa 2</a>：ReactiveCocoa发布2.0版本，没用过的朋友可以用下。</li>
</ul>


<p><strong>Issue 107</strong> &ndash; 16/08/2013</p>

<ul>
<li><a href="http://www.raywenderlich.com/45645/ios-app-security-analysis-part-1">iOS App Security and Analysis</a>：iOS安全方面的一些常用技术，不知道的朋友可以了解下。不过我建议将<a href="http://resources.infosecinstitute.com/ios-application-security-part-1-setting-up-a-mobile-pentesting-platform/">IOS Application security 这个系列</a>看完，推荐。</li>
<li><a href="https://github.com/nicklockwood/OSNavigationController">OSNavigationController</a>：重新实现了UINavigationController，对Container ViewController没有多少经验的朋友，可以通过这个来学习，推荐。</li>
</ul>


<p><strong>Issue 106</strong> &ndash; 9/08/2013</p>

<ul>
<li><a href="http://nilsou.com/blog/2013/08/07/xcode-5-finally-makes-interface-builder-a-viable-option-for-teams/">Mergeable XIB files</a>：Xcode 5中的IB更有利于团队协作开发，中文翻译点<a href="http://beyondvincent.com/blog/2013/09/04/111-xcode-5-finally-makes-interface-builder-a-viable-option-for-teams/">这里</a>。</li>
<li><a href="http://rocket.github.io/">Rocket</a> @Matt开源，Rocket is a technique for building real-time functionality on top of REST web services that leverages web standards like Server-Sent Events and JSON Patch.</li>
</ul>


<p><strong>Issue 105</strong> &ndash; 2/08/2013</p>

<ul>
<li><a href="http://cocoa-dom.tumblr.com/post/56517731293/new-thing-i-do-in-code">New thing I do in code</a>：代码书写的一个新东西，估计目前知道的人比较少，我也是在某个开源项目才知道有这个写法，推荐。</li>
<li><a href="http://blog.amyworrall.com/post/56517622758/omni-frameworks-part-2-using-the-document-picker">Omni Frameworks:Using the Document Picker</a>：<a href="https://github.com/omnigroup">OmniGroup</a>这个团队很牛，经常看到他们搞出来一些非常酷的东西。</li>
<li><a href="http://nshipster.com/nshipster-quiz-3/">NSHipster Quiz</a>：非常好的Quiz。</li>
</ul>


<p><strong>Issue 104</strong> &ndash; 26/07/2013</p>

<ul>
<li><a href="https://github.com/onevcat/VVDocumenter-Xcode">VVDocumenter</a>：Xcode插件，书写Javadoc风格的注释，作者onevcat的<a href="http://onevcat.com/">博客</a>。</li>
<li><a href="http://www.merowing.info/2013/07/stop-writing-data-parsing-code-in-your-apps/">Stop writing data parsing code in your Apps</a>：属性映射，减少了代码量，<a href="https://github.com/krzysztofzablocki/KZPropertyMapper">Github地址</a>。</li>
<li><a href="https://github.com/cloudkite/Masonry">Masonry</a>：轻量级layout框架。</li>
</ul>


<p><strong>Issue 103</strong> &ndash; 19/07/2013</p>

<ul>
<li><a href="https://github.com/tomersh/Objective-C-Generics">Objective-C Generics</a></li>
<li><a href="http://www.mikeabdullah.net/url-paths-cheatsheet.html">URL path retrieval cheat sheet</a></li>
<li><a href="http://blog.securemacprogramming.com/2013/07/on-what-makes-a-good-comment/">On what makes a &ldquo;good&rdquo; comment</a>：如果正确吐槽，哈～，推荐。</li>
</ul>


<p><strong>Issue 102</strong> &ndash; 12/07/2013</p>

<ul>
<li><a href="https://github.com/kattrali/cocoapods-xcode-plugin">CocoaPods Xcode Plugin</a>：CocoaPods的Xcode插件。</li>
<li><a href="http://oleb.net/blog/2013/07/nsurlconnection-api-design">On NSURLConnection API Design</a>：深入NSURLConnection API 的设计。</li>
<li><a href="http://www.doubleencore.com/2013/07/ios-camera-availability/">iOS Camera Availability: A Focus on Assumptions</a>：一个找bug的段子，结果很出乎意料。</li>
<li><a href="http://mariano.zerously.com/post/20670689934/keeping-badges-updated">Keeping Badges Updated</a>：清空badge的大招了。</li>
</ul>


<p><strong>Issue 101</strong> &ndash; 5/07/2013</p>

<ul>
<li><a href="https://github.com/Spaceman-Labs/Squash">SMSquashView</a>：很有趣的动画，描述不来，建议看看。</li>
</ul>


<p><strong>Issue 100</strong> &ndash; 28/06/2013</p>

<ul>
<li><a href="http://www.davemark.com/?p=1829">Resources for Mac and iOS Developers</a></li>
<li><a href="http://inessential.com/2013/06/27/open_source_db5">DB5</a>:从plist里读取color、font等配置，并做成主题，推荐使用，<a href="https://github.com/quartermaster/DB5">Github地址</a>。</li>
<li><a href="http://mackross.net/objc/2013/07/23/objective-c-lessons-from-go/">Objective-C Lessons from Go</a></li>
</ul>


<p><strong>Issue 99</strong> &ndash; 21/06/2013</p>

<ul>
<li><a href="http://nshipster.com/object-subscripting/">Object Subscripting</a>：对象下标，matt的一篇博文，推荐。</li>
<li><a href="http://agilewarrior.wordpress.com/2012/10/06/its-not-about-the-unit-tests/">It’s not about the unit tests</a>：一篇关于unit test的讨论。</li>
</ul>


<p><strong>Issue 98</strong> &ndash; 14/06/2013</p>

<ul>
<li><a href="http://qnoid.com/2013/06/08/Sound-Debugging.html">Sound Debugging</a></li>
</ul>


<p><strong>Issue 97</strong> &ndash; 7/06/2013</p>

<ul>
<li><a href="http://www.doubleencore.com/2013/06/tutorial-finding-calls-to-uniqueidentifier-in-your-ios-app/">Find uniqueIdentifier Calls in Your iOS App</a>：文章介绍了怎么找到唯一标识。</li>
<li><a href="http://joris.kluivers.nl/blog/2013/06/04/quartz-composer-for-ios/">Quartz Composer for iOS</a>：让.qtz文件在iOS系统跑起来的lib,但还没有支持所有pathch，<a href="https://github.com/kluivers/qc-mobile">Github地址</a>。没有玩过Quartz Composer的朋友，建议玩玩。</li>
</ul>


<p><strong>Issue 96</strong> &ndash; 31/05/2013</p>

<ul>
<li><a href="https://itunes.apple.com/us/app/adobe-kuler/id632313714?ls=1&amp;mt=8">Adobe Kuler for iOS</a>：推荐这个App，如果你还没用过赶紧用下。可以创建调色盘。</li>
<li><a href="https://gist.github.com/steipete/5664345">UIKit Main Thread Guard</a>：防止UIKit在非主线程上操作，很好的一个gist，有兴趣的可以看看。</li>
<li><a href="http://pilky.me/view/36">Optimising Autolayout</a></li>
<li><a href="http://floriankugler.com/blog/2013/5/24/layer-trees-vs-flat-drawing-graphics-performance-across-ios-device-generations">Performance of Layer Trees vs. Flat Drawing</a>：性能比较.</li>
<li><a href="http://stackoverflow.com/questions/8863269/how-do-i-verify-reference-count-in-arc-mode/">ARC and retainCount</a>：ARC模式下打印retaincount.</li>
</ul>


<p><strong>Issue 95</strong> &ndash; 24/05/2013</p>

<ul>
<li><a href="http://www.raywenderlich.com/33669/overview-of-ios-crash-reporting-tools-part-1">Overview of iOS Crash Reporting Tools</a>：iOS Crash Reporting工具回顾。</li>
<li><a href="http://swwritings.com/post/2013-05-20-concurrent-debug-beta-app-store-builds">Concurrent Debug, Beta and App Store Builds</a>：三个不同类型的build，建议看看，挺不错的。</li>
<li><a href="http://useyourloaf.com/blog/2013/05/21/state-preservation-and-restoration.html">State Preservation and Restoration</a>：没有做过状态保存和恢复的朋友，可以看看。</li>
</ul>


<p><strong>Issue 94</strong> &ndash; 17/05/2013</p>

<ul>
<li><a href="http://www.steamclock.com/blog/2013/05/apple-objective-c-javascript-bridge/">Apple’s new Objective-C to Javascript Bridge</a></li>
<li><a href="http://nshipster.com/nscoding/">NSCoding / NSKeyedArchiver</a>：matt的一篇博文。</li>
</ul>


<p><strong>Issue 93</strong> 10/05/2013</p>

<ul>
<li><a href="https://github.com/fphilipe/PHFComposeBarView">PHFComposeBarView</a></li>
<li><a href="https://github.com/NSError/ArgumentParser">ArgumentParser</a></li>
<li><a href="http://www.mikeash.com/pyblog/friday-qa-2013-05-03-proper-use-of-asserts.html">Proper Use of Asserts</a></li>
</ul>


<p><strong>Issue 92</strong> 3/05/2013</p>

<ul>
<li><a href="https://github.com/facebook/xctool">xctool</a>：xcodebuild的替换。</li>
<li><a href="https://github.com/zrxq/UIView-EasingFunctions">UIView-EasingFunctions</a></li>
<li><a href="http://swwritings.com/post/2013-04-30-searching-for-speedy-searching">Searching For Speedy Searching</a>：加速数据库搜索。</li>
</ul>


<p><strong>Issue 91</strong> 26/04/2013</p>

<ul>
<li><a href="http://mneorr.github.io/Alcatraz/">Alcatraz</a>：Xcode上的包管理工具，东西挺不错，不过不太稳定。</li>
<li><a href="http://oleb.net/blog/2013/04/compiler-warnings-for-objective-c-developers/">Compiler Warnings for Objective-C Developers</a>：Objective-C上的编译警告，你也可以参考下<a href="http://onevcat.com/2013/05/talk-about-warning/">这篇</a>。</li>
<li><a href="http://blog.bignerdranch.com/1836-hijacking-for-fun-and-profit/">Hijacking for Fun and Profit</a></li>
<li><a href="http://floriankugler.com/blog/2013/4/21/auto-layout-performance-on-ios">Auto Layout Performance on iOS</a>：iOS上autolayout的性能讨论。</li>
<li><a href="https://github.com/tumblr/TMCache">TMCache</a>：在iOS中cache对象的一个lib，感觉不错。</li>
</ul>


<p><strong>Issue 90</strong> 19/04/2013</p>

<ul>
<li><a href="http://www.atomicbird.com/blog/introducing-momdec">momdec</a>：core data的一个工具，可以深入了解coredata 的工作原理。</li>
<li><a href="http://www.nearinfinity.com/blogs/jason_harwig/2012/11/06/capture-a-signature-on-ios.html">Capture a Signature on iOS</a>：捕获手写签名。</li>
<li><a href="https://github.com/thetron/StringScore">StringScore</a>：string匹配等的lib。</li>
<li><a href="http://vimeo.com/user5164093/videos">Building Facebook Home with Quartz Composer</a>：没有用过Quartz Composer可以从这里入门。</li>
</ul>


<p><strong>Issue 89</strong> 12/04/2013</p>

<ul>
<li><a href="http://www.plausible.coop/blog/?p=176">Exploring iOS Crash Reports</a>：研究iOS crash report的好文。</li>
<li><a href="http://furbo.org/2013/04/11/logging-with-xcode-breakpoints/">Logging with Xcode Breakpoints</a>：打印关于断点的信息。</li>
</ul>


<p><strong>Issue 88</strong> 5/04/2013</p>

<ul>
<li><a href="http://www.sailmaker.co.uk/blog/2013/04/02/advanced-jenkins-for-ios-and-mac/">Advanced Jenkins for iOS and Mac</a>：持续集成环境，nsscreencast e13篇也讲Jenkins。</li>
<li><a href="http://oleb.net/blog/2013/03/things-you-need-to-know-about-cocoa-autolayout/">10 Things You Need To Know About Cocoa Autolayout</a>：Autolayout的一些事儿。</li>
<li><a href="http://www.raywenderlich.com/31166/25-ios-app-performance-tips-tricks">25 iOS App Performance Tips &amp; Tricks</a>：性能优化的技巧，推荐，网站上也有中文版本的。</li>
<li><a href="http://www.doubleencore.com/2013/03/ssl-pinning-for-increased-app-security/">SSL Pinning for Increased App Security</a>：iOS安全，SSL Pinning,nsscreencast e73也有.</li>
</ul>


<p>这之前的虽然我也做了笔记，但是总体来说时效性比较强，价值不是非常大，所以不在这里列出。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于NSLog的那点事]]></title>
    <link href="http://liuminqian.github.io/blog/2013/09/19/guan-yu-nslogde-na-dian-shi/"/>
    <updated>2013-09-19T15:04:00+08:00</updated>
    <id>http://liuminqian.github.io/blog/2013/09/19/guan-yu-nslogde-na-dian-shi</id>
    <content type="html"><![CDATA[<p><em>keywords:</em> NSLog, NSLogger, CocoaLumberjack, ColorLog</p>

<p>对于NSLog，分为三块:基本格式、小技巧和第三方工具。</p>

<p>NSLog定义在NSObjCRuntime.h中，如下所示：void NSLog(NSString *format, …)。</p>

<h2>一、基本格式</h2>

<p>%@ 对象 <br/>
%d, %i 整数 <br/>
%u   无符整形 <br/>
%f 浮点/双字 <br/>
%x, %X 二进制整数 <br/>
%o 八进制整数 <br/>
%zu size_t <br/>
%p 指针 <br/>
%e   浮点/双字 （科学计算） <br/>
%g   浮点/双字 <br/>
%s C 字符串 <br/>
%.*s Pascal字符串 <br/>
%c 字符 <br/>
%C unichar <br/>
%lld 64位长整数（long long） <br/>
%llu   无符64位长整数 <br/>
%Lf 64位双字</p>

<p>参考<a href="http://blog.csdn.net/linzhiji/article/details/6933173">这里</a></p>

<h2>二、小技巧</h2>

<p>1.当前源文件的名字、行数、当前的函数名:</p>

<p>  参考<a href="http://blog.csdn.net/a2657222/article/details/8033555">这里</a></p>

<pre><code>__FILE__，__LINE__，  __func__（ 或者 NSStringFromSelector(_cmd) ）

printf("%s\nLine %d:\n", __FILE__, __LINE__);
</code></pre>

<p>2.控制台中NSLog的输出格式等</p>

<p>  有兴趣请参考<a href="http://blog.cnrainbird.com/index.php/2012/10/21/xiu_gai_nslog_de_shu_chu_ge_shi_yi_ji_shi_fou_shu_chu/">这里</a>和<a href="http://stackoverflow.com/questions/969130/how-to-print-out-the-method-name-and-line-number-and-conditionally-disable-nslog">这里</a>，比如是否打印当前文件名、行数等。</p>

<p>3.控制台中信息的颜色插件<a href="https://github.com/DeepIT/ColorLog">ColorLog</a></p>

<h2>三、第三方工具</h2>

<p>常见的第三方工具有:<a href="https://github.com/robbiehanson/CocoaLumberjack">CocoaLumberjack</a> 和 <a href="https://github.com/fpillet/NSLogger">NSLogger</a>。</p>

<p>1.<a href="https://github.com/robbiehanson/CocoaLumberjack">CocoaLumberjack</a> 和 <a href="https://github.com/fpillet/NSLogger">NSLogger</a></p>

<p>介绍：提供了高级日志行为，比如记录日志到文件、网络，根据日志级别来筛选（info,debug,warn,error）。</p>

<p>教程可参考<a href="http://m.oschina.net/blog/96934">这里</a></p>

<p>2.<a href="https://github.com/fpillet/NSLogger">NSLogger</a></p>

<p>介绍：对NSLog的增强，可以标签输出，优先级查找，直接输出图像，多线程标记，时序控制，甚至是通过网络log到别人的终端或者是从别人的终端程序中记录log。</p>

<p>教程可参考<a href="http://doruby.com/blog/2012/12/27/hello-world/">这里</a>或 <a href="http://ishalou.com/blog/2012/10/20/how-to-use-nslogger/">这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nsscreencast笔记]]></title>
    <link href="http://liuminqian.github.io/blog/2013/09/02/nsscreencastbi-ji/"/>
    <updated>2013-09-02T23:15:00+08:00</updated>
    <id>http://liuminqian.github.io/blog/2013/09/02/nsscreencastbi-ji</id>
    <content type="html"><![CDATA[<p><em>keywords:</em> nsscreencast, iOS开发, 笔记</p>

<h2>(截至9/17/2013)</h2>

<p><a href="http://nsscreencast.com/">nsscreencast</a>需要翻墙，每周都发布一个关于iOS开发的screencast，并将每个screencast的sample code放在<a href="https://github.com/subdigital/nsscreencast">这里</a>，内容大多适合基础学习。</p>

<p>这里我将每周的东西进行了简单整理和分类，去除了一些我认为内涵比较少的内容。其中我将这些内容都放到Evernote，这样和其他内容一起，检索非常方便。</p>

<h4>推荐</h4>

<p>每个推荐在下面每个条目前有 (<em>推荐</em>) 字样，推荐的内容可以详细的看下:</p>

<pre><code>11(CoreData基础)、15（HTTP Caching)、20(解析app)、24(Pull to Refresh)、35(Autolayout)、
55(版本管理)、68(Xcode Project Templates)、69(NSFetchedResultsController)、72(Objective-C Collections)、
73(SSL Pinning)、76(从字符串中提取数据的三种方式)
</code></pre>

<h4>所有</h4>

<p>84.xctool: build 和 test app, <a href="https://github.com/facebook/xctool">xctool</a>。</p>

<p>83.TDD View Controllers(第二部分)</p>

<p>82.TDD View Controllers with Specta and OCMock: <a href="http://ocmock.org/">OCMock</a>。</p>

<p>81.Associated Objects: 工程中最常见的Runtime用法， objc_setAssociatedObject和objc_getAssociatedObject。</p>

<p>80.PaintCode: 矢量绘图，<a href="http://paintcodeapp.com/">网址</a>。</p>

<p>79.Sketch: 矢量绘图，<a href="http://www.bohemiancoding.com/sketch/">Sketch</a>和<a href="http://sketchmine.co/">Sketchmine</a></p>

<p>78.TDD Money(第二部分)</p>

<p>77.TDD Money with Specta and Expecta(第一部分): <a href="https://github.com/specta/specta">Specta</a>、<a href="https://github.com/specta/expecta">Expecta</a>和<a href="http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530">Test Driven Development by Example</a>。</p>

<p>(<em>推荐</em>)76.从字符串中提取数据的三种方式:NSRegular，<a href="http://nshipster.com/nsdatadetector/">NSDataDector</a>，<a href="http://nshipster.com/nslinguistictagger/">NSLinguisticTagger</a>。</p>

<p>75.自定义UIScrollView: 一种用法</p>

<p>74.OAuth2: 并介绍了<a href="http://developer.apple.com/library/ios/#DOCUMENTATION/iPhone/Conceptual/iPhoneOSProgrammingGuide/AdvancedAppTricks/AdvancedAppTricks.html#//apple_ref/doc/uid/TP40007072-CH7-SW50">Implementing Custom URL Schemes</a>。</p>

<p>(<em>推荐</em>)73.SSL Pinning: 如果用过Charles的SSL代理功能，应该就能明白只是简单的搞个证书，面对中间人攻击是不安全的。使用SSL Pinning能解决由Charles等带来的这类攻击。建议翻墙细看，这里不贴相关链接。</p>

<p>(<em>推荐</em>)72.Objective-C Collections: 使用和比较了NSSet,NSArray,NSOrderedSet和NSDictionary的性能等。</p>

<p>71.深入使用NSNumberFormatter: <a href="http://useyourloaf.com/blog/2012/06/14/using-number-formatters.html">高级用法</a>。</p>

<p>70.Autolayout with Cells</p>

<p>(<em>推荐</em>)69.NSFetchedResultsController: 正确响应NSManagedObjectContext的变化，和对应的UITableView的变化。</p>

<p>(<em>推荐</em>)68.Xcode Project Templates: 介绍了Xcode项目模版的制作。<a href="http://meandmark.com/blog/2011/12/creating-custom-xcode-4-project-templates/">Blog &ndash; Creating Custom Xcode 4 Project Templates</a>、<a href="https://snipt.net/yonishin/about-xcode-4-project-template/">About Xcode 4 Project Templates</a>、<a href="https://github.com/AFNetworking/Xcode-Project-Templates/">AFNetworking&rsquo;s Project Templates</a>和<a href="https://github.com/borealkiss/Minimal-Template">Borealkiss&rsquo;s Minimal Templates</a>。</p>

<p>67.Map Overlays</p>

<p>66.处理Shapefile(空间数据开放格式): 介绍了如何解析ESRI Shapefiles等。</p>

<p>65.Alcatraz: <a href="http://mneorr.github.io/Alcatraz/">网站</a>，包管理工具，东西不错，不过好像不大稳定，我用的时候经常爆掉。</p>

<p>64.Mapkit Annotations</p>

<p>63.从头开始一个app(From scratch): 介绍了项目的文件结构设置和用<a href="https://gist.github.com/subdigital/5420709">脚本</a>从终端打开Xcode project或者workspace等。</p>

<p>62.发送Logs: 用MFMailComposeViewController</p>

<p>61.Cocoa Lumberjack: log工具<a href="https://github.com/robbiehanson/CocoaLumberjack">Github 地址</a>，还能将log保存到文件。</p>

<p>60.Windows Azure Mobile Services(第二部分)</p>

<p>59.Windows Azure Mobile Services(第一部分)</p>

<p>(<em>推荐</em>)58.Container View Controllers: <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIViewController_Class/Reference/Reference.html">UIViewController Class Reference</a>中&#8221;Implementing a Container View Controller&#8221;</p>

<p>57.整合Facebook</p>

<p>56.整合Twitter: 还介绍了一个Xcode插件<a href="https://github.com/ksuther/KSImageNamed-Xcode">KSImageNamed-Xcode</a>，用于自动补全图片文件名并显示该图片。</p>

<p>(<em>推荐</em>)55.版本管理: <a href="http://semver.org/">Semver</a>详细介绍了版本管理 和 <a href="https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man8/agvtool.8.html">AGVTool</a>是Xcode build的工具。</p>

<p>54.Pony Debugger: 调试工具<a href="https://github.com/square/PonyDebugger">Github 地址</a>，其使用<a href="https://github.com/square/PonyDebugger">SocketRocket</a>作为WebSocket Client。</p>

<p>53.RestKit-Object Manager</p>

<p>52.RestKit-CoreData: 还介绍了几款DB GUI，<a href="http://inductionapp.com/">Induction &ndash; Polyglot Database GUI</a>、<a href="http://menial.co.uk/base/">Base &ndash; SQLite GUI</a>和<a href="http://navicat.com/en/products/navicat_sqlite/sqlite_overview.html">Navicat SQLite</a>。</p>

<p>51.介绍了RestKit: <a href="http://restkit.org/">官网</a>和<a href="https://github.com/RestKit/RestKit">Github 地址</a>。</p>

<p>50.自定义Cell: 推荐了个作图工具<a href="http://www.pixelmator.com/">Pixelmator</a>。</p>

<p>49.滑出菜单(Slide Out Menus): 有<a href="https://github.com/nverinaud/NVSlideMenuController">NVSlideMenuController</a>、<a href="https://github.com/meiwin/MWFSlideNavigationViewController">MWFSlideNavigationViewController</a>、<a href="https://github.com/Joan-Lluch/SWRevealViewController">SWRevealViewController</a>和<a href="https://github.com/pkluz/ZUUIRevealController">ZUUIRevealController</a>。</p>

<p>48.代码段(Code Snippets): <a href="https://github.com/mattt/Xcode-Snippets">Mattt&rsquo;s Snippets</a>、<a href="https://gist.github.com/4463913">Gist of User&rsquo;s favorites</a>和<a href="https://github.com/lukeredpath/xcodesnippets">xcodesnippets gem</a>。</p>

<p>47.手势识别基础</p>

<p>46.UICollectionView基础</p>

<p>45.验证IAP回执(receipt): <a href="https://github.com/nov/itunes-receipt">itunes-receipt gem</a>、<a href="http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/StoreKitGuide/VerifyingStoreReceipts/VerifyingStoreReceipts.html">In-App Purchase Programming Guide: Verifying Store Receipts</a>和<a href="http://www.macworld.com/article/1167677/hacker_exploits_ios_flaw_for_free_in_app_purchases.html">Hacker exploits iOS flaw for free in-app purchases</a>。</p>

<p>44.内购(IAP)基础: <a href="iDeveloper%20Live%20Blog%20-%20Is%20In-App%20Purchase%20Right%20For%20Your%20App?">iDeveloper Live Blog &ndash; Is In-App Purchase Right For Your App?</a>和<a href="https://github.com/mikeahmarani/MAConfirmButton">MAConfirmButton</a>。</p>

<p>43.AVAudioPlayer使用</p>

<p>42.HTTP请求重发</p>

<p>41.用AFNetworking进行认证</p>

<p>40.Shine效果</p>

<p>39.智能JSON解析</p>

<p>38.类反射: 使用runtime来列出类信息。</p>

<p>37.Xcode Tip&amp;Tricks: <a href="https://github.com/omz/ColorSense-for-Xcode">OMColorSense plugin 可视化颜色</a>、<a href="https://github.com/JugglerShu/XVim">XVim plugin</a>、<a href="http://stackoverflow.com/questions/146297/hidden-features-of-xcode">Great Stack Overflow compilation of tips 有些不能用了</a>和<a href="http://cocoasamurai.blogspot.com/2011/03/xcode-4-keyboard-shortcuts-now.html">Xcode keyboard shortcut cheat sheet</a>。</p>

<p>36.UITableView搜索: 介绍了如何在UITableView上增加搜索。</p>

<p>(<em>推荐</em>)35.Autolayout: 还有其他链接和tips，建议直接去看下，就不贴了。</p>

<p><del>34.App升级到iOS 6和 iPhone 5: 现在应该都支持了</del></p>

<p>33.Core Graohics:Polygons(多边形)</p>

<p>32.Core Graphics:Gradients(渐变)</p>

<p>31.用AFNetworking来post multi-part forms</p>

<p>30.Parse: 用Parse来创建一个app，<a href="https://parse.com/">Parse</a>提供了自定义数据存储、push notifications等。</p>

<p>29.RubyMotion: 用Ruby来写native iOS app，<a href="http://www.rubymotion.com/">Ruby Motion 官网</a>。</p>

<p>28.创建一个Cocoapod</p>

<p>27.Objective-C 2012新语法:引入字面量</p>

<p>26.自定义Picker(第2部分)</p>

<p>25.自定义Picker(第1部分)</p>

<p>(<em>推荐</em>)24.Pull to Refresh: 使用<a href="https://github.com/samsoffes/sspulltorefresh">SSPullToRefresh</a>来完成下拉刷新，同时也介绍了<a href="https://github.com/nothingmagical/cheddar-ios">开源App Cheddar</a>，其中这款App的很多做法值得借鉴。</p>

<p>23.Storyboards基础: <a href="http://www.raywenderlich.com/5138/beginning-storyboards-in-ios-5-part-1">Beginning Storyboards in iOS 5 (Ray Wenderlich&rsquo;s Blog)</a></p>

<p>22.自定义UITabBar</p>

<p>21.自定义UINavigationBar</p>

<p>(<em>推荐</em>)20.解析app: 介绍了一些常用的工具来解析一个app，都是非越狱就能完成的。不过这里，我建议<a href="http://www.macroplant.com/iexplorer/">iExplorer</a>和<a href="http://www.charlesproxy.com/">Charles</a>，用这两个基本上就可以了。iExplorer简单解析app结构和资源，Charles来inspect network。</p>

<p>19.推送(Push Notifications)基础: 介绍了如何利用Rails和Urban Airship(第三方api)等来完成前后端。</p>

<p>18.Adhoc Provisioning: 对这个Adhoc不懂的可以直接看这个来入门，不贴里面的链接。</p>

<p>17.App Provisioning: 开发证书，provisioning profile这些不懂的，可以看下。</p>

<p>16.KVO基础: <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html">Key Value Observing Programming Guide</a>、<a href="http://www.dribin.org/dave/blog/archives/2008/09/24/proper_kvo_usage/">Proper use of KVO</a>和<a href="http://www.mikeash.com/pyblog/key-value-observing-done-right.html">KVO Done Right</a>。</p>

<p>(<em>推荐</em>)15.HTTP Caching: 还有其他链接<a href="https://github.com/rs/SDURLCache">SDURLCache</a>、<a href="http://www.charlesproxy.com/">Charles Proxy</a>、<a href="http://cache-tester.herokuapp.com/">Sample web app w/ API</a>和<a href="https://devcenter.heroku.com/articles/ios-network-caching-http-headers">Heroku Dev Center article on iOS HTTP Caching</a>。</p>

<p>14.跟踪下载进度条</p>

<p>13.设置Jenkins: 持续集成工具，<a href="http://jenkins-ci.org/">Jenkins官网</a>、<a href="http://blog.carbonfive.com/2011/04/06/running-xcode-4-unit-tests-from-the-command-line/">Running Xcode Unit Tests from the Command Line</a>和<a href="http://code.google.com/p/hudson-on-cocoa/">Jenkins Build Status Notifier for OS X</a>。</p>

<p>12.将JSON存到CoreData</p>

<p>(<em>推荐</em>)11.CoreData基础: 推荐看下，还有其他链接<a href="http://pragprog.com/book/mzcd/core-data">Core Data Book &ndash; Marcus Zarra</a>、<a href="http://pragprog.com/book/cdirec/ios-recipes">iOS Recipes </a>、<a href="http://rentzsch.github.com/mogenerator/">Mogenerator</a>和<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CoreData/Articles/cdBasics.html">Core Data Programming Guide </a>。</p>

<p>10.Block基础: <a href="http://benscheirman.com/2012/01/careful-with-block-based-notification-handlers">Careful with Block Based Notification Handlers</a>和<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html">Concurrency Programming Guide</a>。</p>

<p><del>9.项目转ARC: <a href="https://developer.apple.com/library/mac/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011226">Apple官方文档</a>。现在app大多都支持了吧。</del></p>

<p>8.UITableView自动翻页的一种优化实现: <a href="https://github.com/subdigital/nsscreencast/tree/master/008-automatic-paging">Github 地址</a>。</p>

<p>7.持久化Data: 展示了如何将普通对象持久化到disk和如何使用NSKeyedArchiver来持久化，拓展阅读:<a href="https://developer.apple.com/library/mac/documentation/cocoa/conceptual/Archiving/Articles/serializing.html">Archives &amp; Serializations Programming Guide</a>和<a href="http://cocoadevcentral.com/articles/000084.php">CocoaDevCentral &ndash; Saving Application Data</a>。</p>

<p>6.AFNetworking: <a href="https://github.com/AFNetworking/AFNetworking/">Github 地址</a>。</p>

<p>5.包管理工具CocoaPods: <a href="http://cocoapods.org/">Cocoapods 官网</a>和<a href="https://github.com/CocoaPods/CocoaPods">Github 地址</a>。</p>

<p>4.测试框架Kiwi: <a href="https://github.com/allending/Kiwi">Github 地址</a>。</p>

<p>3.UITableView基础</p>

<p>2.诊断内存问题: app的表现如何使用Xcode和Instruments来找到和修复问题，拓展阅读:<a href="http://www.raywenderlich.com/2696/instruments-tutorial-for-ios-how-to-debug-memory-leaks">Tutorial on using Zombies &ndash; Ray Wenderlich&rsquo;s blog</a>和<a href="https://developer.apple.com/library/mac/documentation/ToolsLanguages/Conceptual/Xcode_User_Guide/000-About_Xcode/about.html">Apple guide on using the static analyzer in Xcode 4</a>。</p>

<p>1.Objective-C基础: Objective-C语法和内存管理，介绍了一个学习cocoa基础知识的网站<a href="http://cocoadevcentral.com/">CocoaDevCentral</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[提高在Xcode上的工作效率]]></title>
    <link href="http://liuminqian.github.io/blog/2013/08/25/ti-gao-zai-xcodeshang-de-gong-zuo-xiao-lu/"/>
    <updated>2013-08-25T22:36:00+08:00</updated>
    <id>http://liuminqian.github.io/blog/2013/08/25/ti-gao-zai-xcodeshang-de-gong-zuo-xiao-lu</id>
    <content type="html"><![CDATA[<p><em>Key words</em>: Xcode, 效率</p>

<p>对于在Xcode上提高工作效率，内功在这不提，对于外力，我将它分为三类: 工具、快捷键和小技巧。主要获得的路径是通过平时积累和看 <a href="https://developer.apple.com/videos/wwdc/2012/">WWDC12</a> 上的 Session 402:Working Efficiently with Xcode。</p>

<h2>一、工具类 (可参考:<a href="http://d.cocoachina.com/tools/">CocoaChina工具开发库</a>)</h2>

<h3>主要推荐：</h3>

<h4>1. 搜索工具: <a href="http://www.alfredapp.com">alfred</a></h4>

<pre><code>介绍: 让你搜索您的Mac OS更快，更快，更快的！支持本地和网络搜索
</code></pre>

<h4>2. 调试工具: <a href="https://github.com/square/PonyDebugger">ponyDebugger</a></h4>

<pre><code>介绍: Network Traffic Debugging、Core Data Browser、View Hierarchy Debugging。
    还有其他工具和技巧，下回分享，在此不再详细阐述。
使用教程:1) http://iiiyu.com/2013/01/14/simple-configuration-ponydebugger
       2) https://github.com/square/PonyDebugger
</code></pre>

<h4>3. 代码自动补全的两个工具:Xcode自带的Code Snippets和Dash</h4>

<h6>1）Code Snippets</h6>

<pre><code>介绍：Xcode 4 自带代码片段管理工具
使用教程:
 (1)http://blog.cnrainbird.com/index.php/2012/11/26/xcode4_de_zi_dong_wan_cheng_gong_neng_code_sense_or_code_snip(pet (网站打)开比较慢)     
扩展:(建议将3，4这两点的代码有选择的加入Code Snippets，个人用z作为简写的开头)
 (1)Code Snippets自带的代码片段，非常实用，需要仔细查阅，新人不容易发现的简写，比如forin ，ifelse等。
 (2)https://github.com/lukeredpath/xcodesnippets xcodesnippets gem 
 (3)https://github.com/mattt/Xcode-Snippets Mattt's Snippets
 (4)https://gist.github.com/4463913 Gist of User's favorites 其他人的一些code snippets
</code></pre>

<h5>2）<a href="http://kapeli.com/">Dash</a></h5>

<pre><code>介绍：代码片段管理和API文档浏览、搜索功能
使用教程：http://scriptfans.iteye.com/blog/1543219
</code></pre>

<h2>二、快捷键 (Google: Xcode + 快捷键，<a href="http://www.cnblogs.com/yjmyzz/archive/2011/01/25/1944325.html">其他参考链接</a>,毕竟大多快捷键很常见)</h2>

<p>我将这些快捷键分为:代码层的操作，Xcode本身功能的操作和其他。</p>

<h4>主要推荐:</h4>

<h6>表1 代码层的操作</h6>

<p><img src="http://easyspace.b0.upaiyun.com//website/2013-03-3754857e9b7e1a19b2b6d9128bb64bd3.png" alt="表1 代码层的操作" /></p>

<p>当然还有其他，推荐<a href="https://github.com/JugglerShu/XVim">XVim plugin</a>、<a href="http://stackoverflow.com/questions/146297/hidden-features-of-xcode">Hidden Features of Xcode 有些不能用了</a>和<a href="http://cocoasamurai.blogspot.com/2011/03/xcode-4-keyboard-shortcuts-now.html">Xcode keyboard shortcut cheat sheet</a></p>

<h6>表2 Xcode本身功能的操作和其他</h6>

<p><img src="http://easyspace.b0.upaiyun.com//website/2013-03-20a7091010fd5758cd23af0848c6db1b.png" alt="表2 Xcode本身功能的操作和其他" />
注：Command + ,     , 打开Behaviors,  将Running 中Starts修改成如图1，这样每次Debug的时候，都可以看到最大化的调试窗口，但必须Command + T，新加一个Tab，并将名称修改为Debug.
<img src="http://easyspace.b0.upaiyun.com//website/2013-03-283e390d020e8b7748d20c03c41e4b53.png" alt="图1 Behaviors" /></p>

<h6>图1 Behaviors</h6>

<p>我的常用Tab分为Edit, Debug, Build, DataModel, 如图2所示：
<img src="http://easyspace.b0.upaiyun.com//website/2013-03-90a1646ab253a60ad2683a02582c0bc2.png" alt="图2 常用的Tab名" /></p>

<h6>图2 常用的Tab名</h6>

<p>另，还有其他快捷键，诸如： Command + `, Command + Shift + `，Command + J，Command + Control + Shift + ?, Command + R, Command + B。</p>

<h2>小技巧</h2>

<h4>主要推荐：</h4>

<h6>1. TODO: (加个空格) 和 FIXME: (加个空格)</h6>

<p>在注释中，加入这两个关键字，可以让你查看方法(control + 6)时，看到这段文字（如图3 所示），也可以App build的时候，在该处有Warning。</p>

<p><img src="http://easyspace.b0.upaiyun.com//website/2013-03-064a5561f16c98ba82c3c2eff979558f.png" alt="图3查看方法" /></p>

<h6>图3 方法查看</h6>

<h4>2. Automator</h4>

<p>介绍：Mac上自带的一款软件，只要通过点击拖拽鼠标等操作就可以将一系列动作组合成一个工作流，从而帮助你自动的(可重复的)完成一些复杂的工作。
eg，我们需要对头文件中的import进来的文件，进行代码风格统一(按Google Style)。如果文件一多，手工地去完成这件事情将浪费大量时间。这时候，通Automator 就能很方便地完成这个任务。</p>

<h4>主要步骤如下：</h4>

<ol>
<li>打开Automator，选中服务(Service)，如图4所示：
<img src="http://easyspace.b0.upaiyun.com//website/2013-03-bb9508fcb1178f5e1849f61c95a304df.png" alt="图4" />

<h6>图4</h6></li>
<li>搜索到 运行Shell脚本，将运行Shell脚本拖拽到右侧，并在里面输入: sort | uniq。之后，勾选 输出内容替换所有文本。并保存为Sort and Uniq ，如图5所示：
<img src="http://easyspace.b0.upaiyun.com//website/2013-03-e9abe607dbcbc60394f83468262030db.png" alt="图5" />

<h6>图5</h6></li>
<li>现在就可以用了，在代码中，选中要排序的，打开右键菜单，选择Services中的Sort and Uniq即可。</li>
</ol>


<h2>限于水平，有纰漏之处还望指出，盼交流，万分感谢！</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈iOS程序员升级之路]]></title>
    <link href="http://liuminqian.github.io/blog/2013/08/24/tan-ioscheng-xu-yuan-sheng-ji-zhi-lu/"/>
    <updated>2013-08-24T22:03:00+08:00</updated>
    <id>http://liuminqian.github.io/blog/2013/08/24/tan-ioscheng-xu-yuan-sheng-ji-zhi-lu</id>
    <content type="html"><![CDATA[<p><em>keywords</em>: iOS程序员，升级，成长</p>

<p>抛出这么一篇博文，给大家讨论iOS程序员的升级(有哪些方向、每个方向会有哪些阶段和如何完成)提供聊资。这个题目有点大，限于本人经验非常浅，谈这个不慎惶恐，如有失偏颇，请指出。</p>

<p>iOS程序员约是从2008年开始急剧增加。在国内，整个行业还是比较年轻，有丰富经验的程序员相对也比较少。有些是从其他岗位转岗过来，有些是平时的兴趣，有些是毕业就做这方面的开始。下述是从没有其他语言开发背景的角度出发来看iOS程序员如何升级。</p>

<h2>相关工作</h2>

<p>国内，季逸超在知乎上回答了 <a href="http://www.zhihu.com/question/20317296">iOS如何进行逆向</a>.</p>

<p>国外，Mark在bignerdranch上博文<a href="http://blog.bignerdranch.com/2753-leveling-up/">Leveling Up</a>.</p>

<h2>目前的认识</h2>

<p>相关工作中，两位的回答已经比较有系统性，但是我觉得从初学者眼光来看的话，还是不容易去理解、学习和升级。</p>

<p>在这里我将整个升级过程分为不同方向:应用开发、逆向工程和安全。将逆向工程拿出来，是因为觉得逆向工程既属于应用开发，也属于安全。这三个方向也是循序渐进的。此外还需要掌握服务器端和一些常用开发工具。</p>

<h2>应用开发</h2>

<p><img src="http://publicopensource.qiniudn.com/2_001.png" height="319" width="" algin="middle" /></p>

<h6>图1</h6>

<p>如上图所示，将应用开发分三个阶段:基础(图左)、拓展(图中)和深化(图右)。</p>

<h4>&mdash;-基础</h4>

<p>一般基础的学习路径是从语言学习，再到基本UI, 之后是接触更多的iOS的内容。比如你开始做项目的时候，先看个几天的语法，接着开始做项目的时候，常用到UITableview这类UI，Xcode的简单使用等等，到真机测试的时候，要证书这类。推荐两个网站:<a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/chapters/Introduction.html#//apple_ref/doc/uid/TP40012668">马上着手开发iOS应用程序</a>和<a href="http://www.cocoachina.com/special/fornew.html">iOS开发从新手到AppStore上架</a>。 推荐两本书:<a href="http://www.amazon.cn/%E5%9B%BE%E7%81%B5%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%9B%E4%B9%A6-Objective-C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B-%E5%85%8B%E7%BA%B3%E6%96%AF%E7%89%B9/dp/B00COG40Y0/ref=sr_1_1?ie=UTF8&amp;qid=1377360068&amp;sr=8-1&amp;keywords=objective-c">Objective-C基础教程</a>和<a href="http://www.amazon.cn/iOS-6%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98-%E5%86%85%E7%9A%AE%E5%B0%94/dp/B00BUK5FWM/ref=sr_1_1?ie=UTF8&amp;qid=1377361046&amp;sr=8-1&amp;keywords=pushing+the+limit">iOS 6编程实战</a>。</p>

<h4>&mdash;-拓展</h4>

<p>学习完这些基础，再加上你从Github上攒下来的东西，你会觉得市场上大多数app，你都能搞定，信心可能就爆棚了。但是你仍会碰到许多细节问题，比如开机怎么要等那么久、table滚动不够顺滑等卡机问题，也会遇到网络请求和数据处理怎么不够健壮等问题。还有就是有些效果怎么也做不出来或者达不到别人的水平，有些问题完全没思路。</p>

<p>这个时候，你需要做的是拓展。关于拓展的内容就比较有深度了。因为有些问题Google下就能搞定，从而你也就积累了这方面的经验。但是有些问题仅仅靠Google、stackoverflow是搞不定的，你可能需要做自己的研究。为了解决这类问题，我个人的方法是:前期花比较多的时间去看知名开发者的博客或者一些screencast,从而来拓展自己的知识面。再在碰到问题的时候，先去检索这些笔记(自己关于博客等做的笔记，这样检索很方便)，搞不定的话，再去Google，还没搞定，再自己做研究。当然你还会碰到一类问题，就是你听也没听过的(比如我之前压根就不知道NSUndoManager这东西)或者刚出来的东西，这时候，我建议你在前期把apple自己的iOS doc set 和 WWDC 给过一遍，这样即使找不到答案也知道有哪些关键词。</p>

<p>亦或者你会遇到是用native还是web来做这件事情。你需要去学习web app开发技术。</p>

<p>关于拓展，推荐下面的几个博客:(当然也不仅仅是这些博客，还有其他很多很优秀的博客)</p>

<ol>
<li><a href="http://www.mikeash.com/pyblog/">NSBlog</a> Mac OS X 和 iOS编程的高级话题，内容大多有内涵。</li>
<li><a href="http://www.objc.io/">objc.io</a> 大牛很多的博客，每期内容都很高端大气上档次，而且很丰富，必看，里面提到的作者你都可以看下，oleb这些都在。</li>
<li><a href="http://www.raywenderlich.com/">Raywenderlich</a> 很多基础教程，有专门的人在翻译，你可以将语言改成中文来查找已经翻译过的文章。</li>
<li><a href="http://nshipster.com/">NSHipster</a> 对挺多基础的东西解释的比较好。作者mattt，就是写AFNetworking的大牛</li>
<li><a href="http://iosdevweekly.com/">iOSDevWeekly</a> 关于iOS开发的一些新闻、工具、代码、设计和商业等内容，已经有上百期了。</li>
<li><a href="http://nsscreencast.com/">NSScreenCast</a> iOS开发的一些screencast，在前期学习的时候感觉还不错，目前80多期了。</li>
<li><a href="http://blog.bignerdranch.com/">Bignerdranch</a> 一群经验丰富的小伙伴们。</li>
<li><a href="http://blog.devtang.com/blog/categories/ios/">唐巧的技术博客</a> 国内的看的比较少，唐巧的博客是看了一遍，内容比较少，不过都很有条理，比如GCD和Block。</li>
<li><a href="http://blog.csdn.net/kesalin/article/details/8155245">罗朝辉(飘渺白云)</a> 作者的 深入浅出cocoa 非常nice, 关于Runtime讲得很清楚明白。</li>
</ol>


<p>还有必看的项目是：历年的WWDC的视频或者PDF，最好是看视频，也可以先粗看下PDF的。今年的WWDC你可以直接点<a href="https://developer.apple.com/wwdc/videos/">这里</a>。历年的网站是 [ developer.apple.com/videos/wwdc/年份 ] 将年份替换成你需要的那年。</p>

<p>再分享一个<a href="http://xiaojiayi.com">iOS 开发者必知的 75 个工具</a>，这些工具都还不错的。</p>

<p>你也可以问下自己<a href="http://wufawei.com/2013/05/11-interview-questions/">11个iOS面试问题</a>或者<a href="http://onevcat.com/2013/04/ios-interview/">上级向的十个iOS面试问题</a>，看看自己是否达到一定水平了。</p>

<h4>&mdash;-深化</h4>

<p>经过大量阅读和实践之后，做做开发工作已经远远不能满足你了。你应该去思考一些高级话题。我归纳为三个断点，对应不同阶段:</p>

<ol>
<li>已有：这个app的容器该如何去设计，是用MVC来规范整个app还是用MVCS，用纯native、还是纯web或者hybrid，ReactiveCocoa, 自己的突破点等等。</li>
<li>刚出现：iOS新特性带给app的变化或者有哪些用处，新的框架，等等。</li>
<li>未来：业界关于设计和开发等的新趋势，Html5、PhoneGap等的新发展，等等。</li>
</ol>


<p>这时候，就跟大牛扯淡吧。</p>

<h2>逆向工程</h2>

<p>(未完待续)</p>

<h2>安全</h2>

<p>(未完待续)</p>
]]></content>
  </entry>
  
</feed>
